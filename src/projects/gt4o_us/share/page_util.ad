//---------------------------------------------------------------------------------------
// page_util.ad
//
// Root managing utilities
// This file is intended to be used as include
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

function setCursor(context, name)
{
    var page = context.getCommonPage("CursorRoot");
    if (page == nil)
        ;
    else
    {
        page["setIcon"](context, name);
    }
}

function _start_page(context, next_page)
{
    if (next_page != nil)
    {
        if (context != nil)
        {
            if (context.transition != nil)
                context.transition.panOutIn(context);

            setCursor(context, "load");
            context.startPage(next_page);
            setCursor(context);
        }
    }
    else
    {
        if (context != nil)
        {
            if (context.transition != nil)
            {
                context.transition.panOut(context);
                context.transition.syncOut(context);
            }

            context.sync(0.25);
            context.finish();
        }
    }

    //print "\n---End of _start_page, next_page = %{next_page}---\n";
    context.flushKeyEvent();
}

function start_page(context, next_page)
{
    context.pushEvent(main::menu::MFunctionEvent(_start_page, context, next_page));
}

function start_project(context, next_project, arg)
{
    main::game.next_menu_project = next_project;
    if (arg != nil)
        main::game.next_menu_arg = arg;

    start_page(context, nil);
}

function start_sequence(context, next_sequence)
{
    main::game.next_sequence = next_sequence;
    start_page(context, nil);
}

function set_last_focus(name)
{
    last_focus = name; 
}

function focus_last(root, parent)
{
    var focused_widget = nil;
    if (last_focus != nil)
    {
        if (parent.defined(last_focus))
        {
            focused_widget = parent[last_focus];
            root.setFocus(focused_widget);
        }

        last_focus = nil;
    }

    return focused_widget;
}