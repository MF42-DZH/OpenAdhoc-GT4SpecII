//---------------------------------------------------------------------------------------
// race_util.ad
//
// Race utilities
// This file is intended to be used as an include
//
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

function isChampionship(race_code)
{
    var series_count = getSeriesRaceCount(race_code);
    var race_index = getSeriesRaceIndex(race_code);
    var is_championship = series_count > 0 && race_index == 0;
    return is_championship;
}

function getSeriesRaceCount(race_code)
{
    if (race_code.size < 6)
    {
        print "getSeriesRaceCount ... race=%{race_code}%{""}";
        return 0;
    }

    var series = race_code.substr(race_code.size - 4, 2);
    return series.toInt();
}

function getSeriesRaceIndex(race_code)
{
    if (race_code == nil || race_code.size < 4)
    {
        print "getSeriesRaceIndex ... race=%{race_code}%{""}";
        return 0;
    }
    
    var series = race_code.substr(race_code.size - 2, 2);
    return series.toInt();
}

function extractSubRaceCode(race_code)
{
    if (race_code == nil || race_code.size < 2)
    {
        print "extractSubRaceCode ... race=%{race_code}%{""}";
        return 0;
    }
    var list = [];
    var base = race_code.substr(0, race_code.size - 2);

    for (var i = 1; i < 99; i++)
    {
        var label = base + "%02d".format(i);

        if (main::menu::MRaceData::available(label))
        {
            list.push(label);
        }
        else 
            break;
    }

    if (list.size == 0)
    {
        if (main::menu::MRaceData::available(race_code))
            list.push(race_code);
    }

    return list;
}

function extractAllSubRaceCode(race_code)
{
    var list = extractSubRaceCode(race_code);

    if (isChampionship(race_code))
        list.push(race_code);

    return list;
}

function getRaceType(race_code)
{
    if (race_code == nil || race_code.size < 5)
    {
        print "getRaceType ... race=%{race_code}%{""}";
        return nil;
    }
    return race_code.substr(0, race_code.size - 5);
}

function getRacePrefix(race_code)
{
    if (race_code == nil || race_code.size < 2)
    {
        print "getRacePrefix ... race=%{race_code}%{""}";
        return nil;
    }
    return race_code.substr(0, 2);
}

function getEventNameByRaceCode(context, root, race_code)
{
    var code = getRaceType(race_code);
    if (code != nil)
        return context.translate(root, "EventName", code);
    else
        return nil;
}

function getEventNameByRaceCodeForTitle(context, root, race_code)
{
    var code = getRaceType(race_code);
    if (code != nil)
    {
        if (code.size > 2)
        {
            var suffix = code.substr(code.size - 2, 2);

            switch (suffix)
            {
                case "_e":
                case "_n":
                case "_h":
                    code = code.substr(0, code.size - 2);
            }
        }

        return context.translate(root, "EventName", code);
    }
    else
        return nil;
}

function getEventLevelByRaceCode(race_code)
{
    var code = getRaceType(race_code);
    if (code != nil)
    {
        if (code.size > 2)
        {
            var suffix = code.substr(code.size - 2, 2);

            switch (suffix)
            {
                case "_e":
                case "_n":
                case "_h":
                    return suffix.substr(1, 1);
            }
        }
    }

    return nil;
}

function getEventDescriptionByRaceCode(context, root, race_code)
{
    var code = getRaceType(race_code)
    if (code != nil)
        return context.translate(root, "EventInfo", code);
    else
        return nil;
}

function isSpotRaceCompleted(race_code)
{
    var list = extractSubRaceCode(race_code);

    for (var i = 0; i < list.size; i++)
    {
        var unit = main::game.race_record.getUnit(list[i]);
        if (unit.spot_result != "1")
            return false;            
    }
    return true;
}

function clearSpotRaceResult(race_code)
{
    var list = extractSubRaceCode(race_code);

    for (var i = 0; i < list.size; i++)
    {
        var unit = main::game.race_record.getUnit(list[i]);
        unit.spot_result = "";
    }
}

function wonRace(race_code)
{
    if (isChampionship(race_code))
    {
        var unit = main::game.race_record.getUnit(race_code);
        if (unit == nil)
        {
            print "!!!! Race code \"%{race_code}\" not found !!!!";
            return false;
        }
        return unit.result == "1";
    }
    else 
    {
        var list = extractSubRaceCode(race_code);

        for (var i = 0; i < list.size; i++)
        {
            var unit = main::game.race_record.getUnit(list[i]);

            if (unit.result != "1")
                return false;
        }
        return true;
    }
    
}