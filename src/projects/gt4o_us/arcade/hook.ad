#include "../share/course_define.ad";
#include "../share/page_util.ad";

function logInfo(msg)
{
    print "\n--------------------\n";
    print "\n%{msg}\n";
    print "\n--------------------\n";
}

/*function onKeyPress(context, event)
{
    switch (event.keysym)
    {
        case CELL_PAD_CTRL_SELECT:
            if (__projects__.defined("ArcadeProject"))
                main::game.major_menu_project = "arcade";
            if (__projects__.defined("OptionProject"));
                main::game.major_menu_project = "option";

            main::sound.play("return");
            start_project(context, "testmenu", "menu");
            return STATE_YIELD;                
        
    }
    return STATE_EXIT;
}*/

module ArcadeProject::TopRoot
{
    static button_list = 
    [
        hidden::Online,
        hidden::Arcade,
        hidden::GTmode,
        //hidden::Achievements,
        hidden::ReplayTheater,
        hidden::Option,
        hidden::Save,
        hidden::Ending,
        hidden::Credit,
        hidden::ModCredit
    ];

    function setButtonActor2(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1, 0.2);

        widget.actor = actor;
        widget.actor.period = 0.1;
        widget.actor.out = true;
        widget.actor.warp = false;
        
        var label = widget["label"];
        
        actor = main::menu::MMoveActor(label, label.x - 8, label.y);
        label.actor = actor;
        label.actor.ratio = 0.3;
        label.actor.out = true;
        label.actor.warp = false;
    }

    function setFadeActor3(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1);
        widget.actor = actor;
        widget.actor.period = 0.25;
        widget.actor.out = 1;
        widget.actor.warp();
    }

    if (main::game.option.wide_mode)
    {
        SpecII.w = SpecII.w * 3 / 4;
        SpecII.x = 242;
    }

    setButtonActor2(hidden::ModCredit);
    setFadeActor3(SpecII);
    SpecII.actor.out = false;

    function enter(context)
    {
        timeout_enable = true;
        StartScroll.actor.out = false;
        GT.actor.out = false;
        SpecII.actor.out = false;
        Maker.actor.out = false;
    }

    function leave(context)
    {
        timeout_enable = false;
        StartScroll.actor.out = true;
        GT.actor.out = true;
        SpecII.actor.out = true;
        Maker.actor.out = true;
        context.sync(0.1);
    }
    //setButtonActor2(hidden::Achievements);
}

module ArcadeProject::TopRoot::hidden::ModCredit
{
    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;
        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event, item)
    {
        main::sound.play("return");
        start_project(context, "modcredits");
        return EVENTRESULT_FILTER;
    }
}

module ArcadeProject::TopRoot::hidden::Achievements
{
    function onFocusEnter(context, event)
    {
        event.widget.actor.out = false;
        event.widget["label"].actor.out = false;
        return EVENTRESULT_FILTER;
    }

    function onFocusLeave(context, event)
    {
        event.widget.actor.out = true;
        event.widget["label"].actor.out = true;
        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event, item)
    {
        main::sound.play("return");
        start_project(context, "achievements");
        return EVENTRESULT_FILTER;
    }
}

module ArcadeProject::CarRoot
{
    static zoom = 1.0;
    static zoom_range = 0.5;
    static camera_view_angle;

    function onInitialize(context)
    {
        hidden.visible = false;

        ToolTip::tip.remove();
        ToolTip2::tip.remove();
        ToolTip2::tip.value = context.translate(CarRoot, "how to add favorite");

        ToolTip2.visible = main::game.option.limit_favorite_car_only && GameRoot::current_game != "LANBattle";

        if (MethodRoot::getCurrentCategory() != "favorite")
        {
            load_gpb = MethodRoot::getCurrentCategory();
            context.loadGpb("/projects/arcade", load_gpb);
        }

        car_list = MethodRoot::getCurrentCarList();

        if (car_list == nil)
        {
            if (CourseRoot::isDirt())
                car_list = CarData["lan_dirt_carlist"];

            car_list = CarData["lan_carlist"];

            delayOpenConfirmDialog(context, context.translate(CarRoot, "since you do not have any available car"));
            
            if (load_gbp != nil)
            {
                context.unloadGpb(load_gpb);
            }

            load_gpb = "lan";
            context.loadGpb("/projects/arcade", load_gpb);
        }

        set_car_select(context);
        set_car(context);
        CountDown.visible = false;

        if (GameRoot::current_game == "LANBattle")
        {
            main::network.raceMenuNotifySequence(6);
            var watcher = main::menu::MScriptWatcher(context, onTick);
            watcher.interval = 30;
            watcher.append();
        }

        camera_view_angle = CarFace.view_angle

        //var watcher = main::menu::MScriptWatcher(context, onControllerTick);
        ///watcher.interval = 1;
        //watcher.append();
    }

    function onControllerTick(context)
    {
        var update_context = context.getUpdateContext();
        var ry = update_context.getPadAnalogChannel(0, 1) * -1;
        var target = 1.0;
        
        if (ry > 0.25)
        {
            var z = (ry - 0.25) * (1.0 / 0.75);

            target = 1.0 - (z * zoom_range);
        }

        zoom.value += (target - zoom) * 0.1;
        //if (CarFace.car_model != nil)
        //{
            var fovy = (Math::atan(Math::tan(camera_view_angle * 0.5 * 3.1415927 / 180.0) * zoom)) * 2.0;
            //logInfo("ry = %{ry} -> %{(fovy * 180.0) / 3.1415927}", true);
            CarFace.view_angle = (fovy * 180.0) / 3.1415927;
        //}

    }

    function set_car_select(context)
    {
        var car_num = car_list.size;

        if (MethodRoot::getCurrentCategory() == "favorite")
        {
            Logo::bg.from_disk = true;
            Logo::bg.cache = true;

            for (var i = 0; i < car_num; i++)
            {
                var car = car_list[i];
                var label = main::menu::MCarData::GetCarLabel(car);

                Logo::bg.image_path = "piece/car_logo2/" + label + ".img";
                Logo::bg.doInitialize(context);
            }
        }
        else 
        {
            Logo::bg.from_disk = false;
            Logo::bg.cache = false;
        }

        CarScroll::SelectBox.setItemTemplate(context, hidden::MiniItem);
        CarScroll::SelectBox.setItemCount(car_num);
        CarScroll::SelectBox.h_justify = 0.5;
        CarScroll::SelectBox.v_justify = 1.0;
        CarScroll::SelectBox.focus_callback = CarScroll::SelectBox::onValueChanged;

        for (var i = 0; i < car_num; i++)
        {
            var mini = CarScroll::SelectBox.getItemWidget(i, context);
            var car = car_list[i];
            var label = main::menu::MCarData::GetCarLabel(car);

            if (MethodRoot::getCurrentCategory() == "favorite")
            {
                mini["image"].from_disk = true;
                mini["image"].image_path = "piece/car_mini/" + label + ".img";
            }
            else 
            {
                mini["image"].image_path = "image/piece/car_mini/" + label + ".png";
            }   

            if (main::game.option.wide_mode)
            {
                //item["base"].w = 40;
                //item["base"].x += 3;

                mini["image"].w = 42;
                mini["image"].x += 3;
            }
            
            mini["image"].doInitialize(context);
            mini["image"].visible = true;
            mini["dot"].visible = main::game.favorite_car.has(car) && (!main::game.option.limit_favorite_car_only && GameRoot::current_game != "LANBattle");
            mini["up"].visible = !main::game.option.limit_favorite_car_only && GameRoot::current_game != "LANBattle";

            setFadeActor(mini["up"]);
        }
    }
}