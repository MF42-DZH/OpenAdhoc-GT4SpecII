











module GTmodeProject::SpecIISettingPopup
{
    function setMoveActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, widget.x, 480.0);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
    }

    function setFadeActorRoot()
    {
        var actor = main::menu::MFadeActor(ROOT, 1.0);
        actor.repeat = false;
        actor.period = 0.5;
        ROOT.actor = actor;
    }

    setMoveActor(Pane);
    setFadeActorRoot();

    function open(context)
    {
        ROOT.setFocus(nil);
        Pane.actor.destinationY = 480.0;
        Pane.actor.out = true;
        Pane.actor.warp();

        ROOT.actor.out = true;
        ROOT.actor.warp();

        context.pushPage(ROOT);
        Pane.actor.out = false;
        ROOT.actor.out = false;
        ROOT.setFocus(Pane::Button::OK);
    }

    function close(context)
    {
        ROOT.setFocus(nil);
        Pane.actor.destinationY = 480.0;
        Pane.actor.out = true;
        SpecIISettingPopup.actor.out = true;
        context.sync(0.25);

        context.closePage(ROOT);
    }

    function reflect(context)
    {
        Pane::Randomizer::slider.index = randomizer_enabled == nil ? 0 : randomizer_enabled;
        Pane::ASMO::slider.index = global_asmo == nil ? -1 : global_asmo;
        Pane::ASMU::slider.index = global_asmu == nil ? -1 : global_asmu;
        Pane::TCSC::slider.index = global_tcsc == nil ? -1 : global_tcsc;
        Pane::ShowOwned::slider.index = show_owned_cars == nil ? -1 : show_owned_cars;
        var flagActive = cam_flag & FLAG_BONNET_CAM;
        Pane::BonnetCam::slider.index = flagActive ? 1 : 0;
        flagActive = cam_flag & FLAG_INTERIOR_CAM;
        Pane::InteriorCam::slider.index = flagActive ? 1 : 0;
        flagActive = cam_flag & FLAG_ROOF_CAM;
        Pane::RoofCam::slider.index = flagActive ? 1 : 0;
        flagActive = cam_flag & FLAG_GT3_CAM;
        Pane::GT3Cam::slider.index = flagActive ? 1 : 0;
    }

    function setupSlider(slider, isOffOn)
    {
        var popup = slider["popup"];

        if (isOffOn == nil)
            isOffOn = false;

        if (isOffOn)
        {
            slider["label"].text = slider.index == 0 ? "Off" : "On";
            popup["pinch"]["value"].text = slider.index == 0 ? "Off" : "On";
        }
        else 
        {
            if (slider.index == -1)
            {
                slider["label"].text = "Off";
                popup["pinch"]["value"].text = "Off";
            }
            else
            {
                slider["label"].text = slider.index;
                popup["pinch"]["value"].text = slider.index;
            }
        }

        popup["min"].adjustScale();
        popup["max"].adjustScale();
    }

    function onInitialize(context)
    {
        // Check if the entrance address isn't written in "Spec II Format"
        // If it isn't, then assume it's coming from an old patch or a new save, and write some defaults
        if (!main::game.option.entrance_addr.beginWith("r"))
            main::game.option.entrance_addr = "r=0;o=-1;u=-1;t=-1;as=-1;so=1;vm=1;c=8;g=-1;tm=2";


        // Read settings from entrance_addr
        // r = Randomizer enabled, o = ASM Oversteer, u = ASM Understeer, T = TCS, SO = Show Owned, C = Cams
        var settings = main::game.option.entrance_addr.split(";");
        for (var i = 0; i < settings.size; i++)
        {
            var [k, v] = settings[i].split("=");
            switch (k)
            {
                case "r":
                    randomizer_enabled = v.toInt();
                    break;

                case "o":
                    global_asmo = v.toInt();
                    break;
                
                case "u":
                    global_asmu = v.toInt();
                    break;

                case "t":
                    global_tcsc = v.toInt();
                    break;

                case "so":
                    show_owned_cars = v.toInt();
                    break;

                case "c":
                    cam_flag = v.toInt();
                    break;
            }
        }

        Pane.minimum_height = false;
        Pane::Randomizer::slider.range = [0, 1];
        Pane::ASMO::slider.range = [-1, 20];
        Pane::ASMU::slider.range = [-1, 20];
        Pane::TCSC::slider.range = [-1, 10];
        Pane::ShowOwned::slider.range = [0, 1];
        Pane::BonnetCam::slider.range = [0, 1];
        Pane::InteriorCam::slider.range = [0, 1];
        Pane::GT3Cam::slider.range = [0, 1];
        Pane::RoofCam::slider.range = [0, 1];

        reflect(context);

        //Pane::ASMO::slider.index = 0;
        setupSlider(Pane::Randomizer::slider, true);
        setupSlider(Pane::ASMO::slider);
        setupSlider(Pane::ASMU::slider);
        setupSlider(Pane::TCSC::slider);
        setupSlider(Pane::ShowOwned::slider, true);
        setupSlider(Pane::BonnetCam::slider, true);
        setupSlider(Pane::InteriorCam::slider, true);
        setupSlider(Pane::GT3Cam::slider, true);
        setupSlider(Pane::RoofCam::slider, true);
    }

    function onFinalize(context) { }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::Randomizer::slider
{
    function onValueChanged(context)
    {
        randomizer_enabled = slider.index;
        setupSlider(slider, true);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Randomize all car prizes based on your username (%{main::game.username}).";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::ASMO::slider
{
    function onValueChanged(context)
    {
        global_asmo = slider.index;
        setupSlider(slider);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Override Active Stability Management (Oversteer) for all cars.";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::ASMU::slider
{
    function onValueChanged(context)
    {
        global_asmu = slider.index;
        setupSlider(slider);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Override Active Stability Management (Understeer) for all cars.";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::TCSC::slider
{
    function onValueChanged(context)
    {
        global_tcsc = slider.index;
        setupSlider(slider);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Override Traction Control System for all cars.";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::ShowOwned::slider
{
    function onValueChanged(context)
    {
        show_owned_cars = slider.index;
        setupSlider(slider, true);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Highlight cars you already own in the new and used car dealerships.";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::BonnetCam::slider
{
    function onValueChanged(context)
    {
        var camActive = slider.index;
        
        print "cam_flag before == %{cam_flag}";

        if (camActive)
        {
            cam_flag |= FLAG_BONNET_CAM;
            main::game.toggleBonnetCam(1);
        }
        else
        {
            cam_flag &= ~FLAG_BONNET_CAM;
            main::game.toggleBonnetCam();
        }

        print "cam_flag after == %{cam_flag}";

        setupSlider(slider, true);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Enable/disable the bonnet camera view.";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::InteriorCam::slider
{
    function onValueChanged(context)
    {
        var camActive = slider.index;
        
        print "cam_flag before == %{cam_flag}";

        if (camActive)
        {
            cam_flag |= FLAG_INTERIOR_CAM;
            main::game.toggleInteriorCam(1);
        }
        else
        {
            cam_flag &= ~FLAG_INTERIOR_CAM;
            main::game.toggleInteriorCam();
        }

        print "cam_flag after == %{cam_flag}";

        setupSlider(slider, true);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Enable/disable the interior camera view.";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::GT3Cam::slider
{
    function onValueChanged(context)
    {
        var camActive = slider.index;
        
        print "cam_flag before == %{cam_flag}";

        if (camActive)
        {
            cam_flag |= FLAG_GT3_CAM;
            main::game.toggleGT3Cam(1);
        }
        else
        {
            cam_flag &= ~FLAG_GT3_CAM;
            main::game.toggleGT3Cam();
        }

        print "cam_flag after == %{cam_flag}";

        setupSlider(slider, true);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Enable/disable the loose chase camera from classic Gran Turismo titles.";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::RoofCam::slider
{
    function onValueChanged(context)
    {
        var camActive = slider.index;
        
        print "cam_flag before == %{cam_flag}";

        if (camActive)
        {
            cam_flag |= FLAG_ROOF_CAM;
            main::game.toggleRoofCam(1);
        }
        else
        {
            cam_flag &= ~FLAG_ROOF_CAM;
            main::game.toggleRoofCam();
        }

        print "cam_flag after == %{cam_flag}";

        setupSlider(slider, true);
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Enable/disable the roof camera view.";
    }
}

module GTmodeProject::SpecIISettingPopup::Pane::Button::OK
{
    function onActivate(context, event, item)
    {
        main::sound.play("ok");

        saveNewSettings(context, true, true);

        close(context);
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context)
    {
        TopRoot["Common"]["ToolTip"]["tip"].value = "Adjust various settings related to Spec II features.";
    }
}