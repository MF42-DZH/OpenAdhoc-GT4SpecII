









#define OIL_CHANGE_PRICE 50

module GTmodeProject::OilChangeRoot
{
    static col_clear = main::menu::MColorObject(240.0 / 255.0, 195.0 / 255.0, 85.0 / 255.0);
    static col_dirty = main::menu::MColorObject(100.0 / 255.0, 90.0 / 255.0, 30.0 / 255.0);
    static done;

    function onInitialize(context)
    {
        enterPage(context, ROOT, "OilChangeTitle");
        done = false;

        ROOT["Common"]["ToolTip"]["tip"].remove();

        if (main::game.garage.hasRidingCar())
        {
            var car = main::game.garage.riding_car;
            CarFace.car_garage = car;
            CarFace.action_type = "normal";
            CarFace.quality_level = 1;
            CarFace.syncLoading();
            CarFace.car_model.motion = 2;

            var align = 9;
            var align2 = 9;

            switch (car.getDTrainType())
            {
                case "MR":
                case "RR":
                    align = 10;
                    align2 = 10;
                    break;

                case "4WD":
                    align = 9;
                    align2 = 10;
                    break;
            }

            CarFace.loadModelSet("image/gtmode/gtauto/pitmanFix.mdl");
            CarFace.loadModelSet("image/gtmode/gtauto/oil_change_cart.mdl");

            var rot = -90.0;
            if (align == align2)
            {
                CarFace.loadModelOptionMotion("image/gtmode/gtauto/oil_change_f_cam.mot");
                CarFace.loadModelMotion("image/gtmode/gtauto/oil_change.mot", 0, align, 0, rot);
                CarFace.loadModelMotion("image/gtmode/gtauto/oil_change_cart.mot", 1, align, 0, rot);
            }
            else
            {
                CarFace.loadModelOptionMotion("image/gtmode/gtauto/oil_change_cam.mot");
                CarFace.loadModelMotion("image/gtmode/gtauto/oil_change_start.mot", 0, align, 0, rot);
                CarFace.loadModelMotion("image/gtmode/gtauto/oil_change_cart_start.mot", 1, align, 0, rot);
                CarFace.loadModelMotion("image/gtmode/gtauto/oil_change_end.mot", 0, align2, 0, rot);
                CarFace.loadModelMotion("image/gtmode/gtauto/oil_change_cart_end.mot", 1, align2, 0, rot);
            }

            CarFace.car_model.additionalModelScale = 0.95;

            CarFace.car_model.tx = 0.0;
            CarFace.car_model.tz = 0.0;
            CarFace.car_model.ry = align == 10 ? 180.0 : 0.0;
            CarFace.car_model.warp();
        }

        var rate = main::game.garage.riding_car.getOilLifeRate();
        Gauge::oil.setColor(main::menu::MColorObject::interpolate(col_dirty, col_clear, rate))

        Gauge::Done.active = false;
        Change.insensitive = false;

        Price::label.text = main::menu::MUtility::GetMoneyString(OIL_CHANGE_PRICE);

        ROOT.setFocus(Change);
    }

    function onFinalize(context)
    {
        leavePage(context, ROOT);
        done = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        start_page(context, GTAutoRoot);
        return EVENTRESULT_FILTER;
    }
}

module GTmodeProject::OilChangeRoot::Change
{
    function onActivate(context)
    {
        if (!sureEnoughMoney(context, OIL_CHANGE_PRICE))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        var pal = main::menu::MSystem::GetVideoSystem() == "PAL";
        var diff_ratio = 1.0;
        if (pal)
            diff_ratio *= 1.2;

        main::game.incMoney(-OIL_CHANGE_PRICE);
        refreshMoney(ROOT);

        main::game.garage.riding_car.replaceOil();
        context.cursor_visible = false;

        Change.insensitive = true;
        CarFace.quality_level = 0;
        CarFace.car_model.playModelMotion();
        CarFace.car_model.setModelMotionLoop(0);
        
        var original_y = Gauge::oil.y;
        var original_h = Gauge::oil.h;

        main::sound.play("oil_jackup");
        context.sync(8.0);

        main::sound.play("oil");
        ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "now changing");

        for (var i = 0.0; i < original_h; i += diff_ratio)
        {
            Gauge::oil.y = original_y + i;
            Gauge::oil.h = original_h - i;
            context.sync();
        }

        Gauge::oil.y = original_h;
        Gauge::oil.h = 0.0;
        context.sync(1.0);

        Gauge::oil.setColor(col_clear);
        for (var i = original_h; i >= 0.0; i -= diff_ratio)
        {
            Gauge::oil.y = original_y + i;
            Gauge::oil.h = original_h - i;
            context.sync();
        }

        Gauge::oil.y = original_y;
        Gauge::oil.h = original_h;
        Gauge::Done.active = true;
        ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "changing done");

        context.sync(7.95);
        main::sound.play("oil_jackdown");

        while (CarFace.car_model.isPlayingModelMotion())
            context.sync();

        CarFace.car_model.motion = 1;
        CarFace.quality_level = 1;
        
        ROOT.setFocus(Exit);
        context.cursor_visible = true;

        done = true;
        context.flushKeyEvent();
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        if (!done)
            ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "oil change");

        return EVENTRESULT_FILTER;
    }
}

module GTmodeProject::OilChangeRoot::Exit
{
    function onActivate(context)
    {
        main::sound.play("cancel");
        start_page(context, GTAutoRoot);
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        if (!done)
            ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "exit");

        return EVENTRESULT_FILTER;
    }
}