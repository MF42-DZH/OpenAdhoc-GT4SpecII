











module GTmodeProject::EventHallPopup
{
    #define MENU_POP_COUNT 16

    function clearMenuRefs(context)
    {
        for (var i = 0; i < MENU_POP_COUNT; i++)
            main::game.menuPop();
    }

    function setMoveActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, widget.x, 480.0);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
    }

    function setFadeActorRoot()
    {
        var actor = main::menu::MFadeActor(ROOT, 1.0);
        actor.repeat = false;
        actor.period = 0.5;
        ROOT.actor = actor;
    }

    setMoveActor(Pane);
    setFadeActorRoot();

    function open(context)
    {
        ROOT.setFocus(nil);
        Pane.actor.destinationY = 480.0;
        Pane.actor.out = true;
        Pane.actor.warp();

        ROOT.actor.out = true;
        ROOT.actor.warp();

        context.pushPage(ROOT);
        Pane.actor.out = false;
        ROOT.actor.out = false;
        ROOT.setFocus(Pane::Close);
    }

    function close(context)
    {
        ROOT.setFocus(nil);
        Pane.actor.destinationY = 480.0;
        Pane.actor.out = true;
        ROOT.actor.out = true;

        setCrossTransition(context);

        context.sync(0.1);

        context.closePage(ROOT);
    }

    function onInitialize(context)
    {

    }

    function onFinalize(context) {  }

    function onActivate(context)
    {
        var w = ROOT.getFocusedWidget();
        switch (w.name)
        {
            case "Close":
                onCancel(context);
                return EVENTRESULT_FILTER;

            case "Beginner":
            case "Professional":
            case "Extreme":
                TopRoot::ScrollWindow::clip::space["%{w.name}Hall"].onActivate(context);
                close(context);
                return EVENTRESULT_FILTER;

            case "American":
            case "European":
            case "Japanese":
                TopRoot::ScrollWindow::clip::space["Race%{w.name}"].onActivate(context);
                close(context);
                return EVENTRESULT_FILTER;

            default:
                TopRoot::ScrollWindow::clip::space[w.name].onActivate(context);
                close(context);
                return EVENTRESULT_FILTER;
        }
    }

    function onCancel(context, event, item)
    {
        main::sound.play("cancel");
        close(context);
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_SELECT:
                onCancel(context);
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }    
}