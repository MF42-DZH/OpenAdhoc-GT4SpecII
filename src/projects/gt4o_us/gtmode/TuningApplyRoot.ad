//---------------------------------------------------------------------------------------
// TuningApplyRoot.ad
//
// Root for apply a specific tuning part onto a car
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------
#define PARTS_TYPE_BRAKE 1
#define PARTS_TYPE_BRAKECONTROLLER 2
#define PARTS_TYPE_SUSPENSION 3
#define PARTS_TYPE_ASCC 4
#define PARTS_TYPE_TCSC 5
#define PARTS_TYPE_CHASSIS 6
#define PARTS_TYPE_RACINGMODIFY 7
#define PARTS_TYPE_LIGHTWEIGHT 8
#define PARTS_TYPE_STEER 9
#define PARTS_TYPE_DRIVETRAIN 10
#define PARTS_TYPE_GEAR 11
#define PARTS_TYPE_ENGINE 12
#define PARTS_TYPE_NATUNE 13
#define PARTS_TYPE_TURBINEKIT 14
#define PARTS_TYPE_PORTPOLISH 15
#define PARTS_TYPE_ENGINEBALANCE 16
#define PARTS_TYPE_DISPLACEMENT 17
#define PARTS_TYPE_COMPUTER 18
#define PARTS_TYPE_INTERCOOLER 19
#define PARTS_TYPE_MUFFLER 20
#define PARTS_TYPE_CLUTCH 21
#define PARTS_TYPE_FLYWHEEL 22
#define PARTS_TYPE_PROPELLERSHAFT 23
#define PARTS_TYPE_LSD 24
#define PARTS_TYPE_FRONTTIRE 25
#define PARTS_TYPE_REARTIRE 26
#define PARTS_TYPE_NOS 27
#define PARTS_TYPE_SUPERCHARGER 28
#define PARTS_TYPE_WHEEL 29
#define PARTS_TYPE_WING 30
#define PARTS_TYPE_TIRESIZE 31
#define PARTS_TYPE_TIRECOMPOUND 32

#define PARTS_TYPE_TUNE_MAX 32

#define PARTS_CATEGORY_NONE 0

module GTmodeProject::TuningApplyRoot
{
    static pict_name = Array(32 + 1);
    pict_name[1] = [nil, "brake"];
    pict_name[2] = [nil, "bbc"];
    pict_name[3] = [nil, "suspension", "suspension", "suspension", "suspension"];
    pict_name[4] = nil;
    pict_name[5] = nil;
    pict_name[6] = nil;
    pict_name[7] = nil;
    pict_name[8] = [nil, "lightweight", "lightweight", "lightweight"];
    pict_name[9] = nil;
    pict_name[10] = [nil, "vcd"];
    pict_name[11] = [nil, "transmission", "transmission", "transmission"];
    pict_name[12] = nil;
    pict_name[13] = [nil, "natune", "natune", "natune"];
    pict_name[14] = [nil, "turbo", "turbo", "turbo", "turbo", "turbo"];
    pict_name[15] = [nil, "portpolish"];
    pict_name[16] = [nil, "enginebalance"];
    pict_name[17] = [nil, "displacement"];
    pict_name[18] = [nil, "computer"];
    pict_name[19] = [nil, "intercooler", "intercooler"];
    pict_name[20] = [nil, "muffler", "muffler", "muffler"];
    pict_name[21] = [nil, "clutch", "clutch", "clutch"];
    pict_name[22] = [nil, "flywheel", "flywheel", "flywheel"];
    pict_name[23] = [nil, "propellershaft"];
    pict_name[24] = [nil, "lsd", "lsd", "lsd", "lsd", "aycc"];
    pict_name[25] = ["tire_n", "tire_n", "tire_n", "tire_s", "tire_s", "tire_s", "tire_r", "tire_r", "tire_r", "tire_r", "tire_r", "tire_d", "tire_sn"];
    pict_name[26] = pict_name[25];
    pict_name[27] = [nil, "nos"];
    pict_name[28] = [nil, "supercharger"];
    pict_name[28] = [nil, "supercharger"];
    pict_name[31] = [nil, "stiffness"];
    pict_name[32] = ["stiffness_refresh"];

    static extra_info = Array(32 + 1);
    extra_info[1] = nil;
    extra_info[2] = nil;
    extra_info[3] = [nil, "sym|susSP", "sym|susSR", "sym|susRC", "sym|susORG"];
    extra_info[4] = nil;
    extra_info[5] = nil;
    extra_info[6] = nil;
    extra_info[7] = nil;
    extra_info[8] = [nil, "sym|1", "sym|2", "sym|3"];
    extra_info[9] = nil;
    extra_info[10] = nil;
    extra_info[11] = [nil, "sym|gearCL", "sym|gearSC", "sym|gearFC"];
    extra_info[12] = nil;
    extra_info[13] = [nil, "sym|1", "sym|2", "sym|3"];
    extra_info[14] = [nil, "sym|1", "sym|2", "sym|3", "sym|4", "sym|5"];
    extra_info[15] = nil;
    extra_info[16] = nil;
    extra_info[17] = nil;
    extra_info[18] = nil;
    extra_info[19] = [nil, "sym|iclSP", "sym|iclRC"];
    extra_info[20] = [nil, "sym|mufSP", "sym|mufSR", "sym|mufRC"];
    extra_info[21] = [nil, "sym|cluSP", "sym|cluTW", "sym|cluTR"];
    extra_info[22] = [nil, "sym|flySP", "sym|flySM", "sym|flyRC"];
    extra_info[23] = nil;
    extra_info[24] = [nil, "sym|lsd1", "sym|lsd1.5", "sym|lsd2", "sym|lsdFL", "sym|lsdAY"];
    extra_info[25] = ["sym|tirN1", "sym|tirN2", "sym|tirN3", "sym|tirS1", "sym|tirS2", "sym|tirS3", "sym|tirR1", "sym|tirR2", "sym|tirR3", "sym|tirR4", "sym|tirR5", "sym|tirDT", "sym|tirSN"];
    extra_info[26] = extra_info[25];
    extra_info[27] = nil;
    extra_info[28] = nil;
    extra_info[31] = nil;
    extra_info[32] = nil;

    static parts_types;
    static current_car;
    static current_group;
    static newDesc = "";
    static should_replace_labels = false;
    static is_others;

    PartsPict::frame.actor = main::menu::MMoveActor(PartsPict::frame, PartsPict::frame.x, PartsPict::frame.y);
    PartsPict::frame.actor.ratio = 0.2;
    PartsPict::frame.actor.out = true;

    function setPictShown(i)
    {
        PartsPict::frame.actor.destinationX = (-PartsPict.w * i) * 2;
    }

    function getPartsCondition(car, type, category)
    {
        var exist = true;
        var have = true;
        var allowed = true;
        var price = 0;

        if (type < PARTS_TYPE_TUNE_MAX)
        {
            exist = car.isExistParts(type, category);
            have = car.isHavingParts(type, category);
            allowed = car.isAllowedParts(type, category);
            price = car.getPartsPrice(type, category);
        }
        else if (type == 32)
        {
            var scaled_price = (main::menu::MCarData::GetPrice(current_car.car_code) / 40).toInt() * 10;
            if (scaled_price > 35000)
                price = 35000;
            else
                price = scaled_price;
            have = car.getBodyLifeRate() == 0.0;
        }

        return [exist, have, allowed, price];
    }

    function onInitialize(context)
    {
        is_others = false;
        hidden.visible = false;
        enterPage(context, ROOT, "TuningShopTitle");
        ROOT["Common"]["ToolTip"]["tip"].remove();

        var dealer = main::game.menuRef();
        var subtuner = DealerData::getSubTuner(dealer);
        tuner_bg.image_path = "/piece/tuneshop_left/" + subtuner + ".img";
        tuner_bg.doInitialize(context);

        Logo::bg.image_path = "/piece/tuneshop_logo/" + subtuner + ".img";
        Logo::bg.doInitialize(context);

        current_car = main::game.garage.riding_car;
        current_car.loadPartsInfo();

        var index = 0;
        var num = parts_types.size;

        for (var j = 0; j < num; j++)
        {
            var type = parts_types[j];
            var parts_num;

            if (type < PARTS_TYPE_TUNE_MAX)
                parts_num = current_car.getPartsTypeMax(type);
            else
                parts_num = 1;

            var begin_no = 0;

            if (type != PARTS_TYPE_FRONTTIRE && type < PARTS_TYPE_TUNE_MAX)
                begin_no = 1;
            
            for (var i = begin_no; i < parts_num; i++)
            {
                if (main::game.menuRef(1) != "tuners")
                {
                    if (type == PARTS_TYPE_SUSPENSION && i == 4)
                        continue;

                    if (type == PARTS_TYPE_TURBINEKIT && i == 5)
                        continue;
                }

                var item = hidden::Item.doCopy();
                item["bg"].image_path = "image/gtmode/tuneshop/icon/" + pict_name[type][i] + ".png";
                
                var name = getPartsShopName(type, i);

                if (name == nil)
                    name = "";

                // Dumb way of checking if we're in the Others section to do stuff after the loop
                if (name == "STIFFNESS_REFRESH")
                    is_others = true;

                item.defineStatic("parts_type", type);
                item.defineStatic("parts_category", i);
                item.defineStatic("parts_name", name);

                var [exist, have, allowed, price] = getPartsCondition(current_car, type, i);
                item.defineStatic("exist", exist);
                item.defineStatic("have", have);
                item.defineStatic("allowed", allowed);
                item.defineStatic("price", price);
               
                item["done"].visible = exist && have;
                item["none"].visible = !exist;
                item["yet"].visible = exist && !have && !allowed;

                ScrollBox::SelectBox.appendChild(context, item);
                if (extra_info[type] != nil && extra_info[type][i] != nil)
                {
                    var chip = hidden::Chip[current_group].doCopy();
                    item["Spec"].appendChild(context, chip);
                    item["Spec"]["label"].text = context.translate(ROOT, extra_info[type][i]);
                    item["Spec"].movetoLast(item["Spec"]["label"]);
                }

                item.defineStatic("index", index);
                
                var pict = hidden::pict.doCopy();
                pict.image_path = "image/gtmode/tuneshop/parts/" + name + ".png";
                PartsPict::frame.appendChild(context, pict);
                pict.x = pict.w * (index * 2);
                index++;
            }
        }

        // Just some hacky additions to put the full restoration item at the end of the Others menu
        if (is_others)
        {
            var restore = hidden::Item.doCopy();
            restore["bg"].image_path = "image/gtmode/tuneshop/icon/stiffness_refresh.png";

            restore.defineStatic("parts_type", "FULL_RESTORE");
            restore.defineStatic("parts_category", 33);
            restore.defineStatic("parts_name", "FullRestore");
            
            var exist = true;
            var have = current_car.odometer == 0;
            var allowed = true;
            var scaled_price = (main::menu::MCarData::GetPrice(current_car.car_code) / 20).toInt() * 10;
            var price = 0;
            if (scaled_price > 250000)
                price = 250000;
            else
                price = scaled_price;
            restore.defineStatic("exist", exist);
            restore.defineStatic("have", have);
            restore.defineStatic("allowed", allowed);
            restore.defineStatic("price", price);
            
            restore["done"].visible = exist && have;
            restore["none"].visible = !exist;
            restore["yet"].visible = exist && !have && !allowed;

            var pict = hidden::pict.doCopy();
            pict.image_path = "image/gtmode/tuneshop/parts/stiffness_refresh.png";
            PartsPict::frame.appendChild(context, pict);
            pict.x = pict.w * (index * 2);

            ScrollBox::SelectBox.appendChild(context, restore);
        }

        ScrollBox::SelectBox.callFocus(ROOT);
        setPictShown(false);
        PartsPict::frame.actor.warp();
    }

    function onFinalize(context)
    {
        ScrollBox::SelectBox.clearChildren(context);
        PartsPict::frame.clearChildren(context);
        leavePage(context, ROOT);

        current_car = nil;
        current_group = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        start_page(context, TuningRoot);
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_SELECT:
                main::sound.play("ok");
                QuickMenuPopup::open(context);
                return EVENTRESULT_FILTER;
        }
        return EVENTRESULT_CONTINUE;
    }

    function visiblity_refresh(context)
    {
        for (var item = ScrollBox::SelectBox.first; item != nil; item = item.next)
        {
            var type = item["parts_type"];
            var category = item["parts_category"];
            var [exist, have, allowed, price] = getPartsCondition(current_car, type, category);
            item["exist"] = exist;
            item["have"] = have;
            item["allowed"] = allowed;
            item["done"].visible = exist && have;
            item["none"].visible = !exist;
            item["yet"].visible = exist && !have && !allowed;
        }

        if (is_others)
        {
            var exist = true;
            var have = current_car.odometer == 0;
            var allowed = true;
            var scaled_price = (main::menu::MCarData::GetPrice(current_car.car_code) / 20).toInt() * 10;
            var price = 0;
            if (scaled_price > 250000)
                price = 250000;
            else
                price = scaled_price;
            
            var restore = ScrollBox::SelectBox.last;
            restore.defineStatic("exist", exist);
            restore.defineStatic("have", have);
            restore.defineStatic("allowed", allowed);
            restore.defineStatic("price", price);
            
            restore["done"].visible = exist && have;
            restore["none"].visible = !exist;
            restore["yet"].visible = exist && !have && !allowed;
        }
    }

    function set_parts_consistent(car_garage, type, category)
    {
        car_garage.setParts(type, category);

        switch (type)
        {
            case PARTS_TYPE_FRONTTIRE:
                car_garage.setParts(PARTS_TYPE_REARTIRE, category);
                car_garage.syncWheel();
                break;

            // Will remove these when we have the settings project reversed
            case PARTS_TYPE_NATUNE:
                car_garage.setParts(PARTS_TYPE_TURBINEKIT, PARTS_CATEGORY_NONE);
                car_garage.setParts(PARTS_TYPE_SUPERCHARGER, PARTS_CATEGORY_NONE);
                break;

            case PARTS_TYPE_TURBINEKIT:
                car_garage.setParts(PARTS_TYPE_NATUNE, PARTS_CATEGORY_NONE);
                car_garage.setParts(PARTS_TYPE_SUPERCHARGER, PARTS_CATEGORY_NONE);
                break;

            case PARTS_TYPE_SUPERCHARGER:
                car_garage.setParts(PARTS_TYPE_NATUNE, PARTS_CATEGORY_NONE);
                car_garage.setParts(PARTS_TYPE_TURBINEKIT, PARTS_CATEGORY_NONE);
                break;
        }
    }
}

module GTmodeProject::TuningApplyRoot::ScrollBox::SelectBox
{
    function onActivate(context, event)
    {
        var widget = event.widget;
        var type = widget["parts_type"];
        var category = widget["parts_category"];

        if (type < PARTS_TYPE_TUNE_MAX)
        {
            var reversibility = current_car.isReversibilityType(type);
            var message = "";
            var exist = widget["exist"];

            if (!exist)
            {
                main::sound.play("disable");
                if (reversibility)
                    message = context.translate(ROOT, "This parts will not be attached to this car.").format(current_car.short_name);
                else
                    message = context.translate(ROOT, "This parts will not be applied to this car.").format(current_car.short_name);

                openConfirmDialog(context, 2, message);
                return EVENTRESULT_FILTER;
            }

            var have = widget["have"];
            if (have)
            {
                main::sound.play("disable");
                if (reversibility)
                    message = context.translate(ROOT, "You have already had this parts.");
                else
                    message = context.translate(ROOT, "You have already done this parts.");

                openConfirmDialog(context, 2, message);
                return EVENTRESULT_FILTER;
            }

            var allowed = widget["allowed"];
            if (!allowed)
            {
                main::sound.play("disable");
                message = context.translate(ROOT, "You cannot apply this parts yet.");

                openConfirmDialog(context, 2, message);
                return EVENTRESULT_FILTER;
            }
        }
        else
        {
            var have = widget["have"];
            if (have)
            {
                main::sound.play("disable");
                var message = context.translate(ROOT, "You have already done this parts.");

                openConfirmDialog(context, 2, message);
                return EVENTRESULT_FILTER;
            }
        }

        var price = widget["price"];
        main::sound.play("ok");
        
        print "Category %{category}";
        var res = TuningDialog::open(context, type, category, price);
        if (res)
        {
            main::game.incMoney(-price);
            refreshMoney(ROOT);
            main::game.setNeedSave();

            if (category == 33)
            {
                current_car.dirtiness = 0;
                current_car.refreshBody();
                current_car.replaceOil();
                current_car.odometer = 0;
            }

            if (type < PARTS_TYPE_TUNE_MAX)
            {
                current_car.getParts(type, category);

                if (type == PARTS_TYPE_FRONTTIRE)
                    current_car.getParts(PARTS_TYPE_REARTIRE, category);

                var reversibility = current_car.isReversibilityType(type);
                if (reversibility)
                {
                    res = openConfirmDialog(context, 4, context.translate(ROOT, "You bought it. Do you equip this parts now?"));
                    if (res)
                    {
                        //dummyProgress(context, 300.0);
                        set_parts_consistent(current_car, type, category);
                        openConfirmDialog(context, 0, context.translate(ROOT, "You have equipped this parts."));
                    }
                }
                else
                {
                    //dummyProgress(context, 1000.0);
                    set_parts_consistent(current_car, type, category);
                    openConfirmDialog(context, 0, context.translate(ROOT, "You have done this."));
                }
            }
            else
            {
                //dummyProgress(context, 1000.0);
                switch (type)
                {
                    case 32:
                        current_car.refreshBody();
                        break;
                }

                openConfirmDialog(context, 0, context.translate(ROOT, "You have done this."));
            }

            visiblity_refresh(context);
        }

        return EVENTRESULT_FILTER;
    }

    function dummyProgress(context, time)
    {
        var progress = main::menu::MProgress();
        setProgress(context, progress);
        openProgressDialog(context, context.translate(ROOT, "now working"));

        var value = 0.0;
        progress.value = value;
        while (value < 1.0)
        {
            value += main::menu::MRandom::GetValue(0, 200).toFloat() / time;
            progress.value = value;
            context.sync(0.5);
        }

        context.sync(1.0);
        closeProgressDialog(context);
        main::sound.play("ok");
    }

    function onValueChanged(context)
    {

    }
}

module GTmodeProject::TuningApplyRoot::hidden::Item
{
    function onFocusEnter(context, event)
    {
        var item = event.widget;
        var type = item["parts_type"];
        var name = item["parts_name"];
        var price = item["price"];

        if (type == "FULL_RESTORE")
        {
            Name::label.text = context.translate(ROOT, name);
            ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "doc_" + type);
            Price::label.text = "Cr. " + main::menu::MUtility::GetMoneyString(price);
            return;
        }

        var category = item["parts_category"];
        var car_label = current_car.car_code;

        if (item.defined("gear_%{car_label}_name") && item.defined("gear_%{car_label}_desc"))
        {
            Name::label.text = context.translate(ROOT, item["gear_%{car_label}_name"]); 
            ROOT["Common"]["ToolTip"]["tip"].value = item["gear_%{car_label}_desc"];
        }
        else
        {
            Name::label.text = context.translate(ROOT, name);
            ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "doc_" + name);
        }

        setPictShown(item["index"]);

        if (price < 0)
            Price::label.text = "--";
        else
            Price::label.text = "Cr. " + main::menu::MUtility::GetMoneyString(price);

        
    }
}