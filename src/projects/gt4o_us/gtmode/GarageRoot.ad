











module GTmodeProject::GarageRoot
{
    static date_format;
    static trade_mode_;
    static trade_game_;
    static garage_;
    static list_;
    static cars_ = 0;
    static page_ = 0;
    static column_ = 4;
    static item0_ = 1;
    static item1_ = 9;
    static sortUp_ = true;
    static nation_ = "all";
    static tuner_ = "all";
    static dtrain_ = "all";
    static ridingCarVisible_ = false;
    static lineName_ = ["Line0", "Line1", "Line2", "Line3", "Line4",
        "Line5", "Line6", "Line7", "Line8", "Line9"];
    static NationList_;
    static TunerList_;
    static DTrainList_ = ["FF", "FR", "MR", "RR", "4WD"];

    static is_from_event = false;
    static event_based_filter_category;
    static event_based_filters;

    function onLoad(context)
    {
        setFadeActor(List::left);
        setFadeActor(List::right);
    }

    function resetCondition()
    {
        page_ = 0;
        column_ = 4;
        item0_ = 1;
        item1_ = 9;
        sortUp_ = true;
        nation_ = "all";
        tuner_ = "all";
        dtrain_ = "all";
    }

    function open(context, from_event)
    {
        is_from_event = false;
        trade_mode_ = false;
        trade_game_ = nil;

        garage_ = main::game.garage;
        item0_ = 1;

        List::bg.visible = true;
        List::trade_bg.visible = false;
        ridingCarVisible_ = true;

        if (from_event != nil)
        {
            is_from_event = from_event;
            trade_mode_ = false;
            trade_game_ = nil;
        }

        start_page(context, ROOT);
    }

    function openForTrade(context, game)
    {
        trade_mode_ = true;
        trade_game_ = game;

        garage_ = game.garage;
        item0_ = 4;

        List::bg.visible = false;
        List::trade_bg.visible = true;
        ridingCarVisible_ = false;

        start_page(context, ROOT);
    }

    function onInitialize(context)
    {
        enterPage(context, ROOT, trade_mode_ ? "Trade" : "Garage");
        
        date_format = context.translate(ROOT, "date_format");
        init(context);

        if (list_.size == 0)
        {
            print "no car in list!!\n";

            resetCondition();
            init(context);
        }
    }

    function onFinalize(context)
    {
        list_ = nil;
        NationList_ = nil;
        TunerList_ = nil;

        event_based_filter_category = nil;
        event_based_filters = nil;

        Focus::Nation::OptionMenu::popup::vbox.clearWindow(context);
        Focus::Manufacturer::OptionMenu::popup::vbox.clearWindow(context);
        Focus::DriveTrain::OptionMenu::popup::vbox.clearWindow(context);
        List::Title::SortMenu0::popup::vbox.clearWindow(context);
        List::Title::SortMenu1::popup::vbox.clearWindow(context);
        
        date_format = nil;
        leavePage(context, ROOT);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        garage_ = nil;
        trade_game_ = nil;
        trade_mode_ = nil;

        if (is_from_event)
        {
            back_to_event(context, false);
            return EVENTRESULT_FILTER;
        }

        HomeRoot::open(context);
        return EVENTRESULT_FILTER;
    }

    function back_to_event(context, rememberFromGarage)
    {
        EventHallRoot::is_from_garage = rememberFromGarage;

        start_page(context, EventHallRoot);
    }

    function init(context)
    {
        cars_ = garage_.count;
        initNationMenu(context, Focus::Nation::OptionMenu);
        initTunerMenu(context, Focus::Manufacturer::OptionMenu);
        initDTrainMenu(context, Focus::DriveTrain::OptionMenu);
        initDispmenu(context, List::Title::SortMenu0, item0_, item1_);
        initDispmenu(context, List::Title::SortMenu1, item1_, item0_);
        
        ROOT["Common"]["ToolTip"]["tip"].action_type = 1;
        updateList(context);
    }

    function updateList(context)
    {
        pickupCars(context);
        doSort(context);
        updateView(context);
    }

    function updateView(context)
    {
        setSortState();
        updatePage(context);
        Info::cars.text = context.translate(ROOT, "n of n cars").format(list_.size, cars_);
    }

    function updatePage(context)
    {
        var rideCarIdx = garage_.riding_car.getGarageIndex();
        ROOT.visible = false;

        var pages = getPageCount();
        if (page_ >= pages)
            page_ = 0;

        var top = 10 * page_;
        var i = 0;
        for (; i < 10; ++i)
        {
            var idx = i + top;
            if (idx >= list_.size)
                break;

            var cg = list_[idx];
            var item = List::Cars[lineName_[i]];
            item.visible = true;

            var garageIndex = cg.getGarageIndex();
            if (ridingCarVisible_ && rideCarIdx == garageIndex)
                item.active = true;
            else
                item.active = false;

            var label = cg.getCarLabel();
            item["name"].text = cg.short_name_no_year.substr(0, cg.short_name_no_year.size - 4);
            item["name"].abbreviate();

            var year = main::menu::MCarData::GetModelYear(label);
            var yearitem = item["year"];

            if (year < 1945)
            {
                yearitem.text = year.toString();
                yearitem.adjustScale();
            }
            else
            {
                yearitem.text = "'%02d".format(year % 100);
                yearitem.scale_x = 1.0;
            }

            var item0 = item["item0"];
            item0.proportional = item0_ != 0;
            item0.text = getItemText(context, cg, item0_);
            item0.scale_x = 1.0;
            item0.adjustScale();

            var item1 = item["item1"];
            item1.proportional = item1_ != 0;
            item1.text = getItemText(context, cg, item1_);
            item1.scale_x = 1.0;
            item1.adjustScale();

            item["chip"].setData(cg);
        }

        for (; i < 10; ++i)
            List::Cars[lineName_[i]].visible = false;
        
        Info::page.text = pages == 0 ? "" : context.translate(ROOT, "Page n of n").format(page_ + 1, pages);
        List::left.visible = (pages > 1 && page_ > 0) ? true : false;
        List::right.visible = (pages > 1 && page_ < pages - 1);

        ROOT.visible = true;
    }

    function getPageCount()
    {
        return (list_.size + (10 - 1)) / 10;
    }

    function setSortState()
    {
        List::Rule::name.visible = column_ == 0;
        List::Rule::year.visible = column_ == 1;
        List::Rule::color.visible = column_ == 2;
        List::Rule::item0.visible = column_ == 3;
        List::Rule::item1.visible = column_ == 4;

        setTriStateButtonState(List::Title::ButtonName, column_ == 0, sortUp_);
        setTriStateButtonState(List::Title::ButtonYear, column_ == 1, sortUp_);
        setTriStateButtonState(List::Title::ButtonColor, column_ == 2, sortUp_);
        setTriStateButtonState(List::Title::ButtonItem0, column_ == 3, sortUp_);
        setTriStateButtonState(List::Title::ButtonItem1, column_ == 4, sortUp_);
    }

    function setTriStateButtonState(item, enable, isUp)
    {
        var state = enable ? (isUp ? 1 : 2) : 0;
        item["off"].visible = state == 0;
        item["up"].visible = state == 1;
        item["down"].visible = state == 2;
    }
    
    function setSortColumn(c)
    {
        if (c != column_)
            sortUp_ = true;
        else
            sortUp_ ^= 1;

        column_ = c;
    }

    function doSort(context)
    {
        switch (column_)
        {
            case 0:
                main::menu::MCarGarage::sortByName(list_, sortUp_);
                break;

            case 1:
                main::menu::MCarGarage::sortByYear(list_, sortUp_);
                break;

            case 2:
                main::menu::MCarGarage::sortByColor(list_, sortUp_);
                break;

            case 3:
            case 4:
                switch (column_ == 3 ? item0_ : item1_)
                {
                    case 0:
                        main::menu::MCarGarage::sortByDate(list_, sortUp_); break;
                    case 1:
                        main::menu::MCarGarage::sortByPower(list_, sortUp_); break;
                    case 2:
                        main::menu::MCarGarage::sortByWeight(list_, sortUp_); break;
                    case 3:
                        main::menu::MCarGarage::sortByPWR(list_, sortUp_); break;
                    case 4:
                        main::menu::MCarGarage::sortByPrice(list_, sortUp_); break;
                    case 5:
                        main::menu::MCarGarage::sortByPrice(list_, sortUp_); break;
                    case 6:
                        main::menu::MCarGarage::sortByDriveTrain(list_, sortUp_); break;
                    case 7:
                        main::menu::MCarGarage::sortByCountry(list_, sortUp_); break;
                    case 8:
                        main::menu::MCarGarage::sortByTuner(list_, sortUp_); break;
                    case 9:
                        main::menu::MCarGarage::sortByRideHistory(list_, sortUp_); break;
                    case 10:
                        main::menu::MCarGarage::sortByAspiration(list_, !sortUp_); break;
                    // These are sloooow with big garages
                    // But I think I'd rather have them than not
                    case 11:
                        sortByCustom(context, "length", sortUp_);
                        break;
                    case 12:
                        sortByCustom(context, "displacement", sortUp_); 
                        break;
                    case 13:
                        sortByCustom(context, "enginetype", sortUp_);
                        break;
                }

                break;
        }
    }

    function sortByCustom(context, sorttype, sortUp)
    {
        // carlist = [[sortStat, MCarGarage object]]
        var carList = [];
        var stringList = [];
        var dispNoneList = [];
        var dispThreeList = [];
        var dispFourList = [];
        var dispFiveList = [];

        for (var i = 0; i < list_.size; i++)
        {
            var stat;

            switch (sorttype)
            {
                case "displacement":
                    // All kinds of screwy string manipulation to try and standardise the displacement figures
                    var cc = list_[i].getCatDisplacement();
                    var mult;
                    var middle = cc.substr(3, 1); // We're lucky that rotaries with multiplication, e.g. 654x2, and the only engines with float displacement, e.g. 499.5, occur at the same char index

                    if (cc.endWith("cc"))
                        cc = cc.substr(0, cc.size - 2);

                    stat = cc.toInt();

                    if (middle == "x" || middle == ".")
                    {
                        cc = cc.substr(0, 3);

                        if (middle == "x")
                        {
                            var orig_cc = list_[i].getCatDisplacement();
                            mult = orig_cc.substr(orig_cc.size - 3, 1);
                            logInfo(mult);
                            stat = cc.toFloat() + (mult.toFloat() / 10);
                        }
                    }

                    
                    if (cc.beginWith("-"))
                        dispNoneList.push([stat, list_[i]]);
                    else if (cc.size == 4)
                        dispFourList.push([stat, list_[i]]);
                    else if (cc.size == 3)
                        dispThreeList.push([stat, list_[i]]);
                    else if (cc.size == 5)
                        dispFiveList.push([stat, list_[i]]);

                    break;
                case "enginetype":
                    stat = list_[i].getCatEngineType();
                    break;
                case "length":
                    stat = list_[i].getCatLength();
                    break;
            }

            if (sorttype != "displacement")
                carList.push([stat, list_[i]])
        }
        
        if (sorttype != "displacement")
            carList.sort(); 
        else 
        {
            var lists = [];
            lists.push(dispNoneList);
            lists.push(dispThreeList);
            lists.push(dispFourList);
            lists.push(dispFiveList);
            
            for (var i = 0; i < lists.size; i++)
            {
                lists[i].sort();
                logInfo(lists[i]);
                for (var j = 0; j < lists[i].size; j++)
                {
                    carList.push(lists[i][j]);
                }
            }
        }

        var newList = [];

        for (var i = 0; i < carList.size; i++)
        {
            var [stat, car] = carList[i];
            newList.push(car);
        }

        if (!sortUp_)
        {
            var newList2 = [];

            for (var i = newList.size - 1; i >= 0; i--)
            {
                newList2.push(newList[i]);
            }
            newList = newList2;
        }

        //logInfo(list);
        list_ = newList;
    }

    function changeSortColumn(context, c)
    {
        page_ = 0;
        setSortColumn(c);
        doSort(context);
        updateView(context);
    }

    function changeSortColumnNonFlip(context, c)
    {
        page_ = 0;
        column_ = c;
        doSort(context);
        updateView(context);
    }

    function adjustSelectedItemScale(optionmenu)
    {
        var item = optionmenu["selected_item"];
        item["label"].is_face = false;
        item["label"].w = 66.0;
        item["label"].adjustScale();
    }

    static dispItem_ = [
        "acquire date", "power", "weight", "power weight ratio",
        "baseprice", "price", "drive train", "nation", "tuner", "ride history",
        "aspiration", "length", "displacement", "enginetype"
    ];

    function initDispmenu(context, optionmenu, value, otherValue)
    {
        var vbox = optionmenu["popup"]["vbox"];
        vbox.clearWindow(context);

        var n = dispItem_.size;
        for (var i = 0; i < n; ++i)
        {
            var item = hidden::ItemItem.doCopy();
            var textf = item["label"];
            textf.text = context.translate(ROOT, dispItem_[i]);
            textf.adjustScale();

            if (i == otherValue)
                item.insensitive = true;

            vbox.appendChild(context, item);
        }

        optionmenu.applyAppend(context);
        optionmenu.setIndex(context, value);
        adjustSelectedItemScale(optionmenu);
    }

    function changeSortItemInsensitive(context, optionmenu, otherValue, value)
    {
        context.sync();
        context.sync();

        ROOT.visible = false;
        
        var vbox = optionmenu["popup"]["vbox"];
        var n = dispItem_.size;
        var insensitive_list = Array(n);

        for (var i = 0; i < n; ++i)
            insensitive_list[i] = i == otherValue;

        optionmenu.setInsensitive(context, insensitive_list);
        optionmenu.setIndex(context, value);
        adjustSelectedItemScale(optionmenu);

        context.sync();
        context.sync();

        ROOT.visible = true;
    }

    static aspirationStr_ = ["NA", "Turbo", "Super Charger"];

    function getItemText(context, car, item)
    {
        var manager = nil;
        manager = checkGameData(context, 0, manager);
        if (manager != nil)
        {
            garage_.popGarageCar(car.getGarageIndex(), car, manager);
        }

        switch (item)
        {
            case 0:
                var date = main::menu::MCalendar::dayToDate(car.getDate());
                return date_format.build(((date[0] - 2005) + 1), "%2d".format(date[1]), "%3d".format(date[2]));

            case 1:
                var v = car.getCurrentPower();
                if (v <= 0)
                    return "----";
                else
                    return "%d%s".format(v, main::menu::MUnit::GetUnitOfPower());

            case 2:
                return car.getCurrentMs("%d%s");

            case 3:
                return car.getCurrentPWR("%.3t");

            case 4:
                return main::menu::MUtility::GetMoneyString(main::menu::MCarData::GetPrice(car.car_code));

            case 5:
                if (trade_mode_)
                    return main::menu::MUtility::GetMoneyString(car.getUsedPrice());
                else
                    return main::menu::MUtility::GetMoneyString(car.getUsedSellPrice());

            case 6:
                return context.translate(ROOT, "DriveTrainName", car.getDTrainType());

            case 7:
                return context.translate(ROOT, "NATION|" + main::menu::MCarData::GetCountry(car.getCarLabel()));

            case 8:
                return context.translate(ROOT, "TunerName", main::menu::MCarData::GetTuner(car.getCarLabel()));

            case 9:
                var n = car.rideHistory;
                if (n < 1023)
                    return (n + 1).toString();
                    
                return "---";

            case 10:
                return context.translate(ROOT, aspirationStr_[car.getAspiration()]);

            case 11:
                return car.getCatLength() + "mm";

            case 12:
                return car.getCatDisplacement();

            case 13:
                return car.getCatEngineType();
        }
    }

    function initNationMenu(context, optionmenu)
    {
        var vbox = optionmenu["popup"]["vbox"];
        vbox.clearWindow(context);
        var list = garage_.pickupCountry();
        list.sort();

        NationList_ = list;
        var n = list.size;
        var index = 0;
        for (var i = -1; i < n; ++i)
        {
            var item = hidden::NationItem.doCopy();
            item["label"].text = context.translate(ROOT, i < 0 ? "all" : ("NATION|" + list[i]));
            item["label"].adjustScale();
            vbox.appendChild(context, item);

            if (i >= 0 && list[i] == nation_)
                index = i + 1;
        }

        optionmenu.applyAppend(context);
        optionmenu.setIndex(context, index);
    }

    function initTunerMenu(context, optionmenu)
    {
        var vbox = optionmenu["popup"]["vbox"];
        vbox.clearWindow(context);
        var list = garage_.pickupTuner(nation_);
        list.sort();
        
        TunerList_ = list;
        var n = list.size;
        var index = 0;
        for (var i = -1; i < n; ++i)
        {
            var item = hidden::TunerItem.doCopy();
            item["label"].text = i < 0 ? context.translate(ROOT, "all") : context.translate(ROOT, "TunerName", list[i]);
            item["label"].adjustScale();
            vbox.appendChild(context, item);

            if (i >= 0 && list[i] == tuner_)
                index = i + 1;
        }

        optionmenu.applyAppend(context);
        optionmenu.setIndex(context, index);
    }

    function initDTrainMenu(context, optionmenu)
    {
        var vbox = optionmenu["popup"]["vbox"];
        vbox.clearWindow(context);
        var list = DTrainList_;
        
        var n = list.size;
        var index = 0;
        for (var i = -1; i < n; ++i)
        {
            var item = hidden::DTrainItem.doCopy();
            item["label"].text = i < 0 ? context.translate(ROOT, "all") : context.translate(ROOT, "DriveTrainName", list[i]);
            vbox.appendChild(context, item);

            if (i >= 0 && list[i] == dtrain_)
                index = i + 1;
        }

        optionmenu.applyAppend(context);
        optionmenu.setIndex(context, index);
    }

    function pickupCars(context)
    {
        var swappedCars = [];
        var newList = [];
        

        list_ = garage_.pickup(nation_, tuner_, dtrain_);

        print dtrain_;
        if (dtrain_ != "all")
        {
            module DrivetrainSwapModule { }
            DrivetrainSwapModule.load("/projects/specii/DrivetrainSwapCars");

            if (DrivetrainSwapModule::DrivetrainSwapCars.defined("carlist"))
            {
                var cars = DrivetrainSwapModule::DrivetrainSwapCars["carlist"];
                var manager = nil;
                var car = nil;
                manager = checkGameData(context, 0, manager);
                if (manager != nil)
                {
                    var tmpList = garage_.pickup("all", "all", "all");
                    var oldDTrain, newDTrain;
                    for (var i = 0; i < tmpList.size; i++)
                    {
                        car = tmpList[i];
                        var carNation = main::menu::MCarData::GetCountry(car.car_code);
                        var carTuner = main::menu::MCarData::GetTuner(car.car_code);

                        // If it doesn't match the other filters then we can skip the heavy work
                        if ((nation_ != "all" && nation_ != carNation) || (tuner_ != "all" && tuner_ != carTuner))
                            continue;

                        // If the car's pre-garage pop drivetrain matches, check if it's a potential swap car, then decide whether or not to add it
                        if (car.getDTrainType() == dtrain_)
                        {
                            // If it is a potential swap car we need to load its data and see if it *is* swapped
                            if (cars.bsearch(car.car_code) != -1)
                            {
                                oldDTrain = car.getDTrainType();
                                garage_.popGarageCar(tmpList[i].getGarageIndex(), car, manager);
                                newDTrain = car.getDTrainType();

                                if (newDTrain != oldDTrain && newDTrain == dtrain_)
                                {
                                    print "Pushed car as drivetrain is swapped AND matches the current filter";
                                    newList.push(car);
                                    continue;
                                }
                                else
                                {
                                    print "Old drivetrain matched current filter but new one did not";
                                    continue;
                                }
                            }
                            newList.push(car);
                            continue;
                        }
                        
                        // If the pre-pop drivetrain doesn't match but it's not in a swap list, again skip
                        if (cars.bsearch(car.car_code) == -1)
                            continue;

                        oldDTrain = car.getDTrainType();
                        garage_.popGarageCar(tmpList[i].getGarageIndex(), car, manager);
                        newDTrain = car.getDTrainType();
                        
                        // At this point we have a car where its stock drivetrain didn't match the current filter, but new one does - add it
                        if (oldDTrain != newDTrain)
                        {
                            if (newDTrain == dtrain_)
                            {
                                newList.push(car);
                            }
                        }
                        //print car.getDTrainType();
                        
                        //print tmpList[i];
                    }
                }
            }
            list_ = newList;
            DrivetrainSwapModule.clearStatic();
        }
    }

    function setCarNameToToolTip(i)
    {
        if (list_ != nil)
        {
            var idx = i + (10 * page_);
            if (idx < list_.size)
            {
                ROOT["Common"]["ToolTip"]["tip"].value = list_[idx].name;
            }
        }
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_SELECT:
                main::sound.play("ok");
                QuickMenuPopup::open(context);
                return EVENTRESULT_FILTER;
        }
        return EVENTRESULT_CONTINUE;
    }
}

module GTmodeProject::GarageRoot::Focus::Nation::OptionMenu
{
    function onPopupOpen(context)
    {
        List::Cars.visible = false;
    }

    function onPopupClosed(context)
    {
        List::Cars.visible = true;
    }

    function onValueChanged(context, index)
    {
        nation_ = index == 0 ? "all" : NationList_[index - 1];
        tuner_ = 0;
        initTunerMenu(context, Focus::Manufacturer::OptionMenu);
        updateList(context);
    }
}

module GTmodeProject::GarageRoot::Focus::Manufacturer::OptionMenu
{
    function onPopupOpen(context)
    {
        List::Cars.visible = false;
    }

    function onPopupClosed(context)
    {
        List::Cars.visible = true;
    }

    function onValueChanged(context, index)
    {
        tuner_ = index == 0 ? "all" : TunerList_[index - 1];
        updateList(context);
    }
}

module GTmodeProject::GarageRoot::Focus::DriveTrain::OptionMenu
{
    function onPopupOpen(context)
    {
        List::Cars.visible = false;
    }

    function onPopupClosed(context)
    {
        List::Cars.visible = true;
    }

    function onValueChanged(context, index)
    {
        dtrain_ = index == 0 ? "all" : DTrainList_[index - 1];
        updateList(context);
    }
}

module GTmodeProject::GarageRoot::List::Title::ButtonName
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        changeSortColumn(context, 0);
    }
}

module GTmodeProject::GarageRoot::List::Title::ButtonYear
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        changeSortColumn(context, 1);
    }
}

module GTmodeProject::GarageRoot::List::Title::ButtonColor
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        changeSortColumn(context, 2);
    }
}

module GTmodeProject::GarageRoot::List::Title::ButtonItem0
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        changeSortColumn(context, 3);
    }
}

module GTmodeProject::GarageRoot::List::Title::ButtonItem1
{
    function onActivate(context, event)
    {
        main::sound.play("ok");
        changeSortColumn(context, 4);
    }
}

module GTmodeProject::GarageRoot::List::Title::SortMenu0
{
    function onValueChanged(context, index)
    {
        adjustSelectedItemScale(SortMenu0);

        item0_ = index;
        changeSortItemInsensitive(context, List::Title::SortMenu1, index, item1_);

        if (column_ == 3)
            changeSortColumnNonFlip(context, 3);
        else
            updatePage(context);
    }
}

module GTmodeProject::GarageRoot::List::Title::SortMenu1
{
    function onValueChanged(context, index)
    {
        adjustSelectedItemScale(SortMenu1);

        item1_ = index;
        changeSortItemInsensitive(context, List::Title::SortMenu0, index, item0_);

        if (column_ == 4)
            changeSortColumnNonFlip(context, 4);
        else
            updatePage(context);
    }
}

module GTmodeProject::GarageRoot::List::Cars
{
    static index_ = 0;

    function onActivate(context, event)
    {
        var idx = index_ + (10 * page_);
        if (idx < list_.size)
        {
            var car = list_[idx];
            if (trade_mode_)
            {
                if (main::game.garage.isFull())
                {
                    main::sound.play("disable");
                    openConfirmDialog(context, 2, context.translate(BuyCarRoot, "garage full"));
                    return EVENTRESULT_FILTER;
                }

                var price = car.getUsedPrice();
                if (price == 0)
                {
                    price = 200000;

                    openConfirmDialog(context, 0, context.translate(ROOT, "trade price")
                        .format(main::menu::MUtility::GetMoneyString(price)));
                }

                if (!sureEnoughMoney(context, price))
                    return EVENTRESULT_FILTER;
    
                main::sound.play("ok");
    
                if (openConfirmDialog(context, 1, context.translate(ROOT, "do you buy this?").format(car.name)))
                {
                    main::game.incMoney(-price);
                    main::game.garage.addUsedCar(car);
                    main::game.calendar.putBuyTradeCarEvent(car.car_code, car.getColorIndex());
                    refreshMoney(ROOT);
                    refreshDate(context, ROOT);
                    openConfirmDialog(context, 0, context.translate(BuyCarRoot, "You bought this car."));
                }
            }
            else
            {
                // Avoid the possibility of getting around the SureNoOpen/SureNoStrange restrictions with this menu
                if (is_from_event)
                {
                    if (main::game.menuRef(2) != "Special")
                    {
                        if (main::menu::MCarData::GetOpenModelType(car.car_code) == 2)
                        {
                            main::sound.play("disable");
                            openConfirmDialog(context, 2, context.translate(TopRoot, "NoOpenModelCar").format(car.name));
                            return;
                        }
                        if (car.isStrange() && car.car_code != "formula_gran_turismo_04" && car.car_code != "midget_mp5_63")
                        {
                            main::sound.play("disable");
                            openConfirmDialog(context, 2, context.translate(TopRoot, "NoStrangeCar").format(car.name));
                            return;
                        }
                    }
                }
                main::sound.play("ok");

                var manager = nil;

                while (1)
                {
                    manager = checkGameData(context, 0, manager);
                    if (manager != nil)
                    {
                        var r = garage_.popGarageCar(car.getGarageIndex(), car, manager);
                        if (r == "OK")
                        {
                            if (!is_from_event)
                            {
                                CarViewRoot::current_car = car;
                                start_page(context, CarViewRoot);
                            }
                            else
                            {
                                var manager = nil;
                                while (1)
                                {
                                    manager = checkGameData(context, 0, manager);
                                    if (manager != nil)
                                    {
                                        var r = main::game.garage.pushRidingCar(manager);
                                        if (r == "OK")
                                        {
                                            var hasPrevCar = main::game.garage.hasRidingCar();
                                            var prevCar = main::menu::MCarGarage();

                                            if (hasPrevCar)
                                                prevCar.copyFrom(main::game.garage.riding_car);

                                            main::game.garage.setRidingCar(car.getGarageIndex(), car);
                                            if (doAutoSave(context, ROOT, nil, 0, 0))
                                            {
                                                refreshRideCar(ROOT, context, true);
                                                garage_.popGarageCar(car.getGarageIndex(), car, manager);
                                                back_to_event(context, true);
                                                break;
                                            }
                                            else
                                            {
                                                main::game.garage.cancelRidingCar(hasPrevCar ? prevCar.getGarageIndex() : -1, prevCar);
                                            }
                                        }
                                        else
                                        {
                                            if (reportGameDataError(context, 0, 1, r))
                                                continue;
                                        }
                                    }

                                    openConfirmDialog(context, false, context.translate(ROOT, "cancel change car"));
                                    break;
                                }
                            }
                            break;
                        }

                        if (reportGameDataError(context, 0, 0, r))
                            continue;
                    }

                    break;
                }
            }
        }

        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        if (event.keysym == PS2_PAD_CTRL_L3_LEFT)
        {
            if (list_.size >= 10)
            {
                main::sound.play("cursor");
                --page_;

                if (page_ < 0)
                    page_ = getPageCount() - 1;

                updatePage(context);
                setCarNameToToolTip(index_);
            }

            return EVENTRESULT_FILTER;
        }
        else if (event.keysym == PS2_PAD_CTRL_L3_RIGHT)
        {
            if (list_.size >= 10)
            {
                main::sound.play("cursor");
                ++page_;

                if (page_ >= getPageCount())
                    page_ = 0;

                updatePage(context);
                setCarNameToToolTip(index_);
            }

            return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line0
{
    function onFocusEnter(context, event)
    {
        index_ = 0;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line1
{
    function onFocusEnter(context, event)
    {
        index_ = 1;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line2
{
    function onFocusEnter(context, event)
    {
        index_ = 2;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line3
{
    function onFocusEnter(context, event)
    {
        index_ = 3;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line4
{
    function onFocusEnter(context, event)
    {
        index_ = 4;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line5
{
    function onFocusEnter(context, event)
    {
        index_ = 5;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line6
{
    function onFocusEnter(context, event)
    {
        index_ = 6;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line7
{
    function onFocusEnter(context, event)
    {
        index_ = 7;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line8
{
    function onFocusEnter(context, event)
    {
        index_ = 8;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::Cars::Line9
{
    function onFocusEnter(context, event)
    {
        index_ = 9;
        setCarNameToToolTip(index_);
    }
}

module GTmodeProject::GarageRoot::List::left
{

}

module GTmodeProject::GarageRoot::List::right
{

}