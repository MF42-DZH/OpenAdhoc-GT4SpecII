//---------------------------------------------------------------------------------------
// LogRoot.ad
//
// Game calendar viewer root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module GTmodeProject::LogRoot
{
    static current_view_day = 0;
    static original_title_color = nil;
    static original_title_shadow_color = nil;

    function onInitialize(context)
    {
        enterPage(context, ROOT, "DiaryTitle");

        var title_label = ROOT["Common"]["Header"]["Title"]["label"];
        original_title_color = title_label.color;
        original_title_shadow_color = title_label.shadow_color;

        title_label.color = main::menu::MColorObject(0.2, 0.2, 0.2, 1.0);
        title_label.shadow_color = main::menu::MColorObject(0.2, 0.2, 0.2, 0.5);

        ROOT["Common"]["ToolTip"]["tip"].key = "Diary";

        context.cursor_visible = false;

        if (current_view_day == 0)
            move_current_view_to_today(context);

        init(context);
    }

    function onFinalize(context)
    {
        ROOT.setFocus(nil);

        page::days.clearChildren(context);
        var title_label = ROOT["Common"]["Header"]["Title"]["label"];
        title_label.color = original_title_color;
        title_label.shadow_color = original_title_shadow_color;

        leavePage(context, ROOT);
    }

    function update_view(context)
    {
        init(context);
    }

    function init(context)
    {
        page::days.clearChildren(context);

        var pagedate = main::menu::MCalendar::dayToDate(current_view_day);
        var year = (pagedate[0] - 2005) + 1;
        var month = pagedate[1];
        var day0 = (pagedate[2] - 1) / 7 * 7 + 1;
        var nextmonth_year = pagedate[0];
        var nextmonth_month = pagedate[1] + 1;

        if (nextmonth_month > 12)
        {
            nextmonth_year++;
            nextmonth_month = 1;
        }

        var lastday = main::menu::MCalendar::dateToDay(nextmonth_year, nextmonth_month, 1) - 1;
        var lastdate = main::menu::MCalendar::dayToDate(lastday);
        var day1 = day0 + 6;
        if (day1 > lastdate[2])
            day1 = lastdate[2];

        header::year.text = context.translate(ROOT, "YearFormat").format(year);
        header::month.text = context.translate(ROOT, "MonthName%02d".format(month));
        header::week.text = context.translate(ROOT, "PageDayFormat").format(day0, day1);

        for (var i = 0; i < 7; i++)
        {
            var day = current_view_day + i;
            var date = main::menu::MCalendar::dayToDate(day);
            if (date[1] != pagedate[1])
                break;

            var item = append_day_item(context, page::days);
            var record = get_day_record_by_day(context, day);
            item["day"].text = record[0];
            item["record"].text = record[1];
            item["note"].text = record[2];

            if (record[3] != nil)
            {
                item["image"].setImagePath(record[3]);
                item["image"].doInitialize(context);

                var angle = main::menu::MRandom::GetValue(-25, 25, day * 12345);
                item["image"].rotate = angle;
                item["image"].x += main::menu::MRandom::GetValue(-5, 10, day * 23456);
                item["image"].y += main::menu::MRandom::GetValue(-10, 5, day * 34567);
                item["image"].adjustSize();
            }

            if (record[4] != nil)
            {
                item["record"].color = record[4];
                item["note"].color = record[4];
            }

            item["record"].adjustScale();
            item["note"].adjustScale();
        }
    }

    function append_day_item(context, target)
    {
        var item = hidden::LogListItem.doCopy();
        target.appendChild(context, item);
        return item;
    }

    function get_day_record_by_day(context, julian_day)
    {
        var record = [];
        var date = main::menu::MCalendar::dayToDate(julian_day);
        var day = date[2];
        record.push(day.toString());
    
        var calendar = main::game.calendar;
        var event = get_event_by_day(julian_day);

        if (event != nil)
        {
            var type = event[0];
            switch (type)
            {
                case "NO_EVENT":
                    record.push("");
                    record.push("");
                    record.push(nil);
                    record.push(nil);
                    break;

                case "GET_CAR":
                    var format1 = "";
                    var format2 = "";

                    switch (event[3])
                    {
                        case "BUY_NEW":
                            format1 = "BuyCarFormat1";
                            format2 = "BuyCarFormat2";
                            break;

                        case "BUY_USED":
                            format1 = "BuyUsedCarFormat1";
                            format2 = "BuyUsedCarFormat2";
                            break;

                        case "BUY_TRADE":
                            format1 = "TradeCarFormat1";
                            format2 = "TradeCarFormat2";
                            break;

                        case "GET_PRESENT":
                            format1 = "PresentCarFormat1";
                            format2 = "PresentCarFormat2";
                            break;
                    }

                    var cg = main::menu::MCarGarage(event[1]);
                    record.push(context.translate(ROOT, format1).format(cg.short_name));

                    var colorname = cg.getColorName(event[2]);
                    if (colorname != nil && colorname != "" && colorname != "-")
                        record.push(context.translate(ROOT, format2).format(colorname));
                    else
                        record.push("");

                    record.push(nil);
                    record.push(main::menu::MColorObject(0.3, 0.3, 0.3, 1.0));
                    cg = nil;
                    break;

                case "SELL_CAR":
                    var name = main::menu::MCarData::GetShortCarName(event[1]);
                    var price = 0;
                    
                    if (event[3] != nil)
                        price = event[3].toInt();
                    
                    if (price >= 65535)
                        record.push(context.translate(ROOT, "SellCarFormatPriceless").format(name));
                    else if (price > 0)
                        record.push(context.translate(ROOT, "SellCarFormat").build(name, main::menu::MUtility::GetMoneyString(price)));
                    else
                        record.push(context.translate(ROOT, "SellCarFormatForFree").format(name));

                    record.push("");
                    record.push(nil);
                    record.push(main::menu::MColorObject(0.3, 0.3, 0.3, 1.0));
                    break;

                case "BUY_WHEEL":
                    var name = getWheelName(context, event[1], event[3] != 0);
                    var category = event[2] == "NONE" ? "" : context.translate(ROOT, "WheelCategory_" + event[2]);
                    record.push(context.translate(ROOT, "BuyWheelFormat1").build(name, category));
                    record.push(context.translate(ROOT, "BuyWheelFormat2").build(name, category));
                    record.push(nil);
                    record.push(main::menu::MColorObject(0.3, 0.3, 0.3, 1.0));
                    break;
                    
                case "BUY_WING":
                    if (event[1] == nil)
                    {
                        record.push(context.translate(ROOT, "BuyDefaultWing"))
                        record.push("");
                    }
                    else
                    {
                        var name = getWingName(context, event[1]);
                        record.push(context.translate(ROOT, "BuyWingFormat1").build(name));
                        record.push(context.translate(ROOT, "BuyWingFormat2").build(name));
                    }

                    record.push(nil);
                    record.push(main::menu::MColorObject(0.3, 0.3, 0.3, 1.0));
                    break;

                case "RUN_RACE":
                    if (event[2] == "view")
                    {
                        var racename = getRaceNameByRaceCode(context, event[1]);
                        if (racename != nil)
                            record.push(context.translate(ROOT, "WatchRaceFormat1").build(racename));
                        else
                        {
                            print "RUN_RACE(view): error (%{event[1]})\n";
                            record.push("");
                        }

                        record.push("");
                        record.push(nil);
                        record.push(main::menu::MColorObject(0.35, 0.25, 0.25, 1.0));
                    }
                    else
                    {
                        var racename = getRaceNameByRaceCode(context, event[1]);
                        if (racename != nil)
                        {
                            var result = "";
                            if (event[2] != nil && event[2] != "")
                                result = context.translate(ROOT, "RaceResult_" + event[2]);

                            if (racename.beginWith("eventgen"))
                                record.push(context.translate(ROOT, "RunRaceEventGenFormat").build(result));
                            else
                                record.push(context.translate(ROOT, "RunRaceFormat1").build(racename, result));
                            print "RUN_RACE: result=%{result}, event2=%{event[2]}\n";
                        }
                        else
                        {
                            record.push("");
                            print "RUN_RACE: error (%{event[1]})\n";
                        }

                        var opt = "";
                        if (event[3] != nil)
                        {
                            switch (event[3])
                            {
                                case "1":
                                case "2":
                                case "3":
                                case "4":
                                case "5":
                                case "6":
                                    opt = context.translate(ROOT, "RaceOverall_" + event[3]);
                            }
                        }

                        var time = "";
                        if (event[4] != nil && event[4] != "")
                            time = context.translate(ROOT, "TimeFormat").format(event[4]) + "  ";

                        record.push(context.translate(ROOT, "RunRaceFormat2").build(opt, time));
                        record.push(event[2] == "1" ? "image/gtmode/home/diary_trophy.png" : nil);
                        record.push(main::menu::MColorObject(0.35, 0.25, 0.25, 1.0));
                    }
                    break;

                case "RUN_LICENSE":
                    if (event[1].size != "jpl0b0000".size)
                    {
                        record.push("");
                        record.push("");
                        record.push(nil);
                        record.push(main::menu::MColorObject());
                        break;
                    }
                    
                    var code = event[1].substr(3, 2);
                    var stage = getSeriesRaceIndex(event[1]);
                    var name = context.translate(ROOT, "License_" + code) + " " + context.translate(ROOT, "LicenseNumberFormat").format(stage);
                    
                    var result = "";
                    if (event[2] != nil && event[2] != "" && event[2] != "NONE")
                        result = context.translate(ROOT, "License_" + event[2]);
                    
                    var note = "";
                    if (event[3] != nil && event[3] != "" && event[3] != "NONE")
                        note = context.translate(ROOT, "Get_" + event[3]);

                    var time = "";
                    if (event[4] != nil && event[4] != "")
                        time = context.translate(ROOT, "TimeFormat").format(event[4]) + " ";

                    record.push(context.translate(ROOT, "RunLicenseFormat1").build(name, result));
                    record.push(context.translate(ROOT, "RunLicenseFormat2").build(note, time));
                    record.push((event[2] != nil && event[2] == "gold") ? "image/gtmode/home/diary_trophy.png" : nil);
                    record.push(main::menu::MColorObject(0.25, 0.25, 0.35, 1.0));
                    break;

                case "RUN_MISSION":
                    var stage = getSeriesRaceIndex(event[1]);
                    var name = context.translate(ROOT, "MissionRaceFormat").format(stage);
                    
                    var result = "";
                    if (event[2] != nil && event[2] != "")
                        result = context.translate(ROOT, "Mission_" + event[2]);
                    
                    var note = "";
                    var time = "";

                    if (event[4] != nil && event[4] != "")
                        time = context.translate(ROOT, "TimeFormat").format(event[4]) + " ";

                    record.push(context.translate(ROOT, "RunMissionFormat1").build(name, result));
                    record.push(context.translate(ROOT, "RunMissionFormat2").build(note, time));
                    record.push((event[2] != nil && event[2] == "1") ? "image/gtmode/home/diary_trophy.png" : nil);
                    record.push(main::menu::MColorObject(0.25, 0.25, 0.35, 1.0));
                    break;

                case "RUN_COURSE":
                    var format1 = "";
                    var format2 = "";
                    var image_path = nil;

                    switch (event[2])
                    {
                        case "FREERUN":
                            format1 = "RunFreeRunFormat1";
                            format2 = "RunFreeRunFormat2";
                            break;

                        case "PRACTICE":
                            format1 = "RunPracticeFormat1";
                            format2 = "RunPracticeFormat2";
                            break;

                        case "PHOTO":
                            format1 = "RunPhotoDriveFormat1";
                            format2 = "RunPhotoDriveFormat2";
                            break;

                        case "TRAVEL":
                            format1 = "RunPhotoTravelFormat1";
                            format2 = "RunPhotoTravelFormat2";
                            break;

                        case "EVENT":
                            format1 = "RunFamilyCupFormat1";
                            format2 = "RunFamilyCupFormat2";
                            if (event[3] != nil && event[3] == "1")
                                image_path = "image/gtmode/home/diary_trophy.png";
                            break;

                        case "MACHINE_TEST":
                            format1 = "RunMachineTestFormat1";
                            format2 = "RunMachineTestFormat2";
                            break;
                    }

                    var course = context.translate(ROOT, "CourseNameCaption", event[1]);
                    
                    var result = "";
                    if (event[3] != nil && event[3] != "" && event[3] != "NONE")
                        result = context.translate(ROOT, "RaceResult_" + event[3]);

                    var note = "";
                    if (event[4] != nil && event[4] != "" && event[4] != "NONE")
                        note = context.translate(ROOT, "RaceResult_" + event[4]);
    
                    var time = "";
                    if (event[5] != nil && event[5] != "")
                        time = context.translate(ROOT, "TimeFormat").format(event[5]);

                    record.push(context.translate(ROOT, format1).build(course, time, result, note));
                    record.push(context.translate(ROOT, format2).build(course, time, result, note));
                    record.push(image_path);
                    record.push(main::menu::MColorObject(0.35, 0.25, 0.25, 1.0));
                    break;
                
                default:
                    print "unknown event: %{type}\n";
                    record.push("");
                    record.push("");
                    record.push(nil);
                    record.push(nil);
                    break;
            }
        }
        else
        {
            record.push("");
            record.push("");
            record.push(nil);
            record.push(main::menu::MColorObject(0.2, 0.2, 0.2, 1.0));
        }

        return record;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        HomeRoot::open(context);
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_L3_LEFT:
                ROOT.visible = false;
                move_current_view_page(context, -1);
                context.sync();
                ROOT.visible = true;
                context.sync();
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_L3_RIGHT:
                ROOT.visible = false;
                move_current_view_page(context, 1);
                context.sync();
                ROOT.visible = true;
                context.sync();
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_L1:
                ROOT.visible = false;
                move_current_view_year(context, -1);
                context.sync();
                ROOT.visible = true;
                context.sync();
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_R1:
                ROOT.visible = false;
                move_current_view_year(context, 1);
                context.sync();
                ROOT.visible = true;
                context.sync();
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_START:
                main::sound.play("select");
                ROOT.visible = false;

                if (move_current_view_to_today(context))
                    update_view(context);
                
                context.sync();
                ROOT.visible = true;
                context.sync();

                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_SELECT:
                main::sound.play("ok");
                QuickMenuPopup::open(context);
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    function getRaceNameByRaceCode(context, race_code)
    {
        var eventname = getEventNameByRaceCode(context, ROOT, race_code);
        if (eventname == nil || eventname == race_code)
        {
            print "[no rtext: %{race_code}]";
            return nil;
        }

        var text = nil;
        var race_spec = main::menu::MRaceData(race_code);
        var course_name = context.translate(ROOT, "CourseNameCaption", race_spec.course_code);

        if (getSeriesRaceCount(race_code) > 0)
        {
            var formatstring = context.translate(ROOT, "ChampionshipRaceFormat");
            var raceindex = getSeriesRaceIndex(race_code);
            text = formatstring.build(eventname, raceindex, course_name);
        }
        else
        {
            var formatstring = context.translate(ROOT, "SingleRaceFormat");
            text = formatstring.build(eventname, course_name);
        }

        return text;
    }

    function move_current_view_to_origin_day(context)
    {
        var calendar = main::game.calendar;
        var today = main::menu::MCalendar::dateToDay(calendar.today[0], calendar.today[1], calendar.today[2]);
        var oldest_day = (today - 365 * 8) - 2;
        var origin_day = calendar.gameDayToDay(0);

        if (origin_day < oldest_day)
            origin_day = oldest_day;

        var date = main::menu::MCalendar::dayToDate(origin_day);
        var day = (date[2] - 1) / 7 * 7 + 1;
        var prev_view_day = current_view_day;
        current_view_day = main::menu::MCalendar::dateToDay(date[0], date[1], day);
        return current_view_day != prev_view_day;
    }

    function move_current_view_to_today(context)
    {
        var calendar = main::game.calendar;
        var yesterday = main::menu::MCalendar::dateToDay(calendar.today[0], calendar.today[1], calendar.today[2]) - 1;

        var date = main::menu::MCalendar::dayToDate(yesterday);
        var day = main::menu::MCalendar::dateToDay(date[0], date[1], (date[2] - 1) / 7 * 7 + 1);

        var e1 = get_event_by_day(day);
        var e2 = get_event_by_day(day + 6);

        if (e1 == nil && e2 == nil)
        {
            day = main::menu::MCalendar::dateToDay(calendar.today[0], calendar.today[1], (calendar.today[2] - 1) / 7 * 7 + 1);
        }
        var prev_view_day = current_view_day;
        current_view_day = day;
        return current_view_day != prev_view_day;
    }

    function move_current_view(context, offset)
    {
        var day = current_view_day;
        var e1 = get_event_by_day(day + offset);
        var e2 = get_event_by_day((day + offset) + 6);

        if (e1 != nil || e2 != nil)
        {
            current_view_day += offset;
            update_view(context);
            return true;
        }

        return false;
    }

    function move_current_view_page(context, offset)
    {
        var date = main::menu::MCalendar::dayToDate(current_view_day + (offset * 7));
        var year = date[0];
        var month = date[1];
        var day = date[2];

        if (offset >= 0)
            day = (day - 1) / 7 * 7 + 1;
        else
            day = (day - 1 + 6) / 7 * 7 + 1;

        var newday = main::menu::MCalendar::dateToDay(year, month, day);
        var origin_day = main::menu::MCalendar::gameDayToDay(0);

        var e1 = get_event_by_day(newday + 0);
        var e2 = get_event_by_day(newday + 6);

        if (newday >= origin_day && (e1 != nil || e2 != nil))
        {
            main::sound.play("select");
            current_view_day = newday;
            update_view(context);
            return true;
        }

        var update = false;
        if (offset > 0)
            update = move_current_view_to_today(context);
        else
            update = move_current_view_to_origin_day(context);

        if (update)
        {
            main::sound.play("select");
            update_view(context);
        }
        else
        {
            main::sound.play("disable");
        }

        return false;
    }

    function move_current_view_year(context, offset)
    {
        var date = main::menu::MCalendar::dayToDate(current_view_day);
        var year = date[0] + offset;
        var month = date[1];
        var day = date[2];

        var newday = main::menu::MCalendar::dateToDay(year, month, day);
        var e1 = get_event_by_day(newday + 0);
        var e2 = get_event_by_day(newday + 6);

        if (e1 != nil || e2 != nil)
        {
            main::sound.play("select");
            current_view_day = newday;
            update_view(context);
            return true;
        }

        var update = false;
        if (offset > 0)
            update = move_current_view_to_today(context);
        else
            update = move_current_view_to_origin_day(context);

        if (update)
        {
            main::sound.play("select");
            update_view(context);
        }
        else
        {
            main::sound.play("disable");
        }

        return false;
    }

    function get_event_by_day(day)
    {
        var date = main::menu::MCalendar::dayToDate(day);
        var year = date[0];
        var month = date[1];
        var day = date[2];

        return main::menu::MCalendar().getEvent(year, month, day);
    }
}