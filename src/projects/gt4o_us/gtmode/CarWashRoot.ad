









#define CAR_WASH_PRICE 50

module GTmodeProject::CarWashRoot
{
    static done;

    function onInitialize(context)
    {
        enterPage(context, ROOT, "CarWashTitle");
        done = false;

        ROOT["Common"]["ToolTip"]["tip"].remove();

        if (main::game.garage.hasRidingCar())
        {
            CarFace.car_garage = main::game.garage.riding_car;
            CarFace.action_type = "normal";
            CarFace.quality_level = 1;
            CarFace.syncLoading();
            CarFace.car_model.motion = 2;
            CarFace.loadModelSet("image/gtmode/gtauto/pitmanFix.mdl");
            CarFace.loadModelOptionMotion("image/gtmode/gtauto/car_wash_cam.mot");
            CarFace.loadModelMotion("image/gtmode/gtauto/carwash_motion1.mot", 0, 7);
            CarFace.loadModelMotion("image/gtmode/gtauto/carwash_motion2.mot", 0, 1);
            CarFace.loadModelSet("image/gtmode/gtauto/carwash_cloth.mdl");
            CarFace.loadModelMotion("image/gtmode/gtauto/carwash_cloth1.mot", 1, 7);
            CarFace.loadModelMotion("image/gtmode/gtauto/carwash_cloth2.mot", 1, 1);
            CarFace.car_model.additionalModelScale = 0.95;
        }

        CarFace.car_model.tx = 0.0;
        CarFace.car_model.tz = 20.0;
        CarFace.car_model.ry = 0.0;
        CarFace.car_model.warp();

        CarFace.car_model.tz = 0.0;
        CarFace.car_model.posInterpolateSpeed = 0.05;

        Gauge::Drop0.active = false;
        Gauge::Drop1.active = false;
        Gauge::Drop2.active = false;
        Gauge::Drop3.active = false;
        Gauge::Drop4.active = false;
        Gauge::Drop5.active = false;
        Gauge::Drop6.active = false;
        Gauge::Drop7.active = false;
        Gauge::Drop8.active = false;
        Gauge::Drop9.active = false;
        Gauge::Drop10.active = false;
        Gauge::Drop11.active = false;
        Gauge::Done.active = false;
        Wash.insensitive = false;

        Price::label.text = main::menu::MUtility::GetMoneyString(CAR_WASH_PRICE);

        ROOT.setFocus(Wash);
    }

    function onFinalize(context)
    {
        leavePage(context, ROOT);
        done = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        start_page(context, GTAutoRoot);
        return EVENTRESULT_FILTER;
    }
}

module GTmodeProject::CarWashRoot::Wash
{
    function onActivate(context)
    {
        if (!sureEnoughMoney(context, CAR_WASH_PRICE))
        {
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        main::sound.play("car_wash");
        
        main::game.incMoney(-CAR_WASH_PRICE);
        refreshMoney(ROOT);

        ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "now washing");

        context.cursor_visible = false;
        Wash.insensitive = true;
        CarFace.car_model.rotInterpolateSpeed = 0.1;

        var ry = 0.0;
        var vy = 0.0;
        var n = 210;
        var a = 0.15609092;

        var dirt = main::game.garage.riding_car.dirtiness;

        for (var i = 0; vy >= 0.0; ++i)
        {
            if (i < n)
                vy += a;
            else 
            {
                if (vy < 5.0)
                    a = 0.03149211;

                vy -= a;
            }

            ry += vy;
            if (vy < 0)
                break;

            CarFace.car_model.ry = ry;
            dirt *= 0.99;

            main::game.garage.riding_car.dirtiness = dirt;

            context.sync();

            switch (i)
            {
                case 20:
                    Gauge::Drop0.active = true; break;

                case 60:
                    Gauge::Drop1.active = true; break;

                case 100:
                    Gauge::Drop2.active = true; break;

                case 140:
                    Gauge::Drop3.active = true; break;

                case 200:
                    Gauge::Drop4.active = true; break;
            }
        }

        main::game.garage.riding_car.dirtiness = 0;
        CarFace.quality_level = 0;
        CarFace.car_model.playModelMotion();
        CarFace.car_model.setModelMotionLoop(0);
        
        var pal = main::menu::MSystem::GetVideoSystem() == "PAL";
        if (pal)
        {
            context.sync(0.5);
            Gauge::Drop5.active = true;

            context.sync(0.5);
            Gauge::Drop6.active = true;

            context.sync(0.5);
            Gauge::Drop7.active = true;

            context.sync(0.5);
            Gauge::Drop8.active = true;

            context.sync(0.5);
            Gauge::Drop9.active = true;

            context.sync(0.4);
            Gauge::Drop10.active = true;

            context.sync(0.3);
            Gauge::Drop11.active = true;

            context.sync(0.3);
            Gauge::Done.active = true;
        }
        else
        {
            context.sync(0.8);
            Gauge::Drop5.active = true;

            context.sync(0.8);
            Gauge::Drop6.active = true;

            context.sync(0.8);
            Gauge::Drop7.active = true;

            context.sync(0.8);
            Gauge::Drop8.active = true;

            context.sync(0.7);
            Gauge::Drop9.active = true;

            context.sync(0.6);
            Gauge::Drop10.active = true;

            context.sync(0.5);
            Gauge::Drop11.active = true;

            context.sync(0.4);
            Gauge::Done.active = true;
        }

        ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "washing done");

        while (CarFace.car_model.isPlayingModelMotion())
            context.sync();

        CarFace.car_model.motion = 1;
        CarFace.quality_level = 1;
        
        ROOT.setFocus(Exit);
        context.cursor_visible = true;

        done = true;
        context.flushKeyEvent();
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        if (!done)
            ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "wash");

        return EVENTRESULT_FILTER;
    }
}

module GTmodeProject::CarWashRoot::Exit
{
    function onActivate(context)
    {
        main::sound.play("cancel");
        start_page(context, GTAutoRoot);
        return EVENTRESULT_FILTER;
    }

    function onFocusEnter(context, event)
    {
        if (!done)
            ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "exit");

        return EVENTRESULT_FILTER;
    }
}