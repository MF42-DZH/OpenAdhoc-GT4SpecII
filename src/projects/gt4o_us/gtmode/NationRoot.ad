//---------------------------------------------------------------------------------------
// NationRoot.ad
//
// Dealership nation tuner selection root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module GTmodeProject::NationRoot
{
    static this_tuner = nil;

    function arrange(widget, idx, num, clip)
    {
        if (idx >= num)
            return;

        var x = 0.0;
        var y = clip.h * 0.1;
        var w = clip.w * 1.0;
        var h = clip.h * 0.8;

        switch (num)
        {
            case 1:
                widget.x = x + w * 0.5;
                widget.y = y + h * 0.5;
                break;

            case 2:
                var iy = (idx % 2) * 6 + 5;
                widget.x = x + (w * 0.5);
                widget.y = y + ((h * iy) / 16.0);
                break;

            case 3:
                var iy = (idx % 3) * 2 + 1;
                widget.x = x + (w * 0.5);
                widget.y = y + ((h * 0.1667) * iy);
                break;

            case 4:
                var ix = (idx % 2) * 6 + 5;
                var iy = (idx / 2) * 6 + 5;
                widget.x = x + ((w * ix) / 16.0);
                widget.y = (y + (h * iy) / 16.0) - 24.0;
                break;

            case 5:
                var ix = (idx % 3) * 2 + 1;
                var iy = (idx / 3) * 6 + 5;
                widget.x = x + ((w * 0.1667) * ix);
                widget.y = (y + (h * iy) / 16.0) - 24.0;
                break;

            case 6:
                var ix = (idx % 3) * 2 + 1;
                var iy = (idx / 3) * 6 + 5;
                widget.x = x + ((w * 0.1667) * ix);
                widget.y = (y + (h * iy) / 16.0) - 24.0;
                break;

            default:
                var ix = (idx / 3) * 2 + 1;
                var iy = (idx % 3) * 2 + 1;
                widget.x = x + ((w * 0.1667) * ix);
                widget.y = y + ((h * 0.1667) * iy);
                break;
        }

        widget.x -= widget.w * 0.5;
        widget.y -= widget.h * 0.5;
    }

    function onInitialize(context)
    {

        hidden.visible = false;
        var nation = main::game.menuRef();
        this_tuner = nil;
        enterPageNation(context, ROOT, context.translate(ROOT, "CarTown_" + nation), nation);
        
        bg.image_path = "piece/nation_bg/" + nation + ".img";
        bg.doInitialize(context);

        var dealers = NationData[nation + "_dealers"];
        var usbcamera_connected = false;

        var nike_enabled = true;//usbcamera_connected || main::game.isCarAvailable("nike_one_04");
        var pd_enabled = wonRace("pr_gtworld_1000") || isCarOwned("formula_gran_turismo_04");
        var available_num = 0;

        for (var i = 0; i < dealers.size; i++)
        {
            var dealer = dealers[i];
            if (dealer == "nike" && !nike_enabled)
                continue;

            if (dealer == "polyphony" && !pd_enabled)
                continue;

            var listname = dealer + "_carnum";
            if (!NewCarData.defined(listname) && !LegendCarData.defined(listname) && !CompleteCarData.defined(listname))
                continue;

            available_num++;
        }

        var tuner_list = nil;

        if (main::game.garage.hasRidingCar())
            tuner_list = main::game.garage.riding_car.getTunerList();
        
        var idx = 0;
        var first_item = nil;

        for (var i = 0; i < dealers.size; i++)
        {
            var dealer = dealers[i];
            if (dealer == "nike" && !nike_enabled)
                continue;

            if (dealer == "polyphony" && !pd_enabled)
                continue;

            var listname = dealer + "_carnum";
            if (!NewCarData.defined(listname) && !LegendCarData.defined(listname) && !CompleteCarData.defined(listname))
                continue;

            var item = hidden::Item.doCopy();
            if (first_item == nil)
                first_item = item;

            if (dealer == discount_tuner)
            {
                item["discount"].text = "-%{100 - discount_pricemult}%%";
                item["discount"].visible = true;
            }

            var path = "image/piece/tuner_logo2/" + dealer + ".png";
            var title = item["title"];
            item.name = dealer;
            title.image_path = path;

            ScrollWindow::clip::space.appendChild(context, item);
            setFadeActor(item["bgf"]);

            if (tuner_list != nil)
            {
                var subtuner = DealerData::getSubTuner(dealer);
                for (var j = 0; j < tuner_list.size; j++)
                {
                    var tuner = tuner_list[j];
                    if (tuner == dealer || tuner == subtuner)
                    {
                        item.active = true;
                        this_tuner = item;
                        break;
                    }
                }
            }

            title.adjustSize();

            if (wide)
            {
                title.w *= 0.7;
                title.h *= 0.85;
                title.x += (item.w - title.w) * 0.5;
                title.y += (item.h - title.h) * 0.4;
            }
            else
            {
                title.w *= 0.85;
                title.h *= 0.85;
                title.x += (item.w - title.w) * 0.5;
                title.y += (item.h - title.h) * 0.5;
            }

            item.defineStatic("dealer", dealer);
            arrange(item, idx, available_num, ScrollWindow::clip);
            idx++;
        }

        var fwidget = focus_last(ROOT, ScrollWindow::clip::space);
        if (fwidget == nil)
        {
            fwidget = first_item;
            ROOT.setFocus(fwidget);
        }

        if (available_num <= 9)
            ScrollWindow::clip::space.w = ScrollWindow::clip.w;
        else
            ScrollWindow::clip::space.w = ((idx + 2) / 3).toFloat() * ScrollWindow::clip.w * 0.33;

        if (fwidget != nil)
            ScrollWindow.warp(fwidget);
        
        ROOT["Common"]["ToolTip"]["tip"].remove();
    }

    function onFinalize(context)
    {
        ScrollWindow::clip::space.clearWindow(context);
        leavePage(context, ROOT);
    }

    module TopWidget
    {
        static japan = "DealerJapan";
        static korea = "DealerKorea";
        static usa = "DealerUSA";
        static german = "DealerGerman";
        static sweden = "DealerSweden";
        static uk = "DealerUK";
        static france = "DealerFrance";
        static italy = "DealerItaly";
        static australia = "DealerAustralia";
        static spain = "DealerSpain";
        static netherlands = "DealerNetherlands";
        static belgium = "DealerBelgium";
        static tuners = "TunerCar";
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        var nation = main::game.menuPop();
        set_last_focus(TopWidget[nation]);
        start_page(context, TopRoot);
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_R1:
                if (this_tuner != nil && ROOT.getFocusedWidget() != this_tuner)
                {
                    main::sound.play("cursor");
                    ROOT.setFocus(this_tuner);
                }
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_SELECT:
                main::sound.play("ok");
                QuickMenuPopup::open(context);
                return EVENTRESULT_FILTER;
        }
        return EVENTRESULT_CONTINUE;
    }
}

module GTmodeProject::NationRoot::ScrollWindow::clip::space
{
    function check_camera(context)
    {
        var camera = main::menu::MEyetoy();
        camera.initialize();
        camera.start_camera();

        var connected = false;

        for (var i = 0; i < 180; i++)
        {
            camera.update_camera();
            if (camera.connected)
            {
                connected = true;
                break;
            }

            context.sync();
        }

        context.sync(2.0);

        camera.stop_camera();
        camera.finalize();
        return connected;
    }

    function onActivate(context, event)
    {
        var dealer = event.widget["dealer"];
        main::sound.play("ok");
        if (main::game.menuRef() == "tuners")
        {
            main::game.menuPush(dealer);
            start_page(context, TuningRoot);
        }
        else
        {
            main::game.menuPush(dealer);
            start_page(context, DealerRoot);
        }

        return EVENTRESULT_FILTER;
    }
}

module GTmodeProject::NationRoot::hidden::Item
{
    function onFocusEnter(context, event)
    {
        var widget = event.widget;
        ROOT["Common"]["ToolTip"]["tip"].value = context.translate(ROOT, "TunerDoc", widget["dealer"]);
    }
}