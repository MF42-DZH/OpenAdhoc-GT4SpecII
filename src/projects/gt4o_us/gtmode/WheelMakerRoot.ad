











module GTmodeProject::WheelMakerRoot
{
    static current_dealer;

    function onInitialize(context)
    {
        enterPage(context, ROOT, "WheelMakerTitle");
        Price.text = main::menu::MUtility::GetMoneyString(500);

        var car = main::game.garage.riding_car;
        var list = car.getTunerList();
        var tuner = list[0];

        // For tuner-built cars we want to override with their base manufacturer
        switch (tuner)
        {
            case "fpv":
                tuner = "ford";
                break;

            case "mines":
                if (car.car_code == "mines_r34_00")
                    tuner = "nissan";
                else
                    tuner = "mitsubishi";
                break;

            case "nismo":
                tuner = "nissan";
                break;

            case "spoon":
                tuner = "honda";
                break;
        }

        // Specific exception for the Sileighty
        if (car.car_code == "sileighty_xx")
            tuner = "nissan";

        Pane::maker.defineStatic("tuner", tuner);
        Pane::maker.label.text = context.translate(ROOT, "Maker Wheels").format(context.translate(ROOT, "TunerName", tuner));

        // Check if data for this manufacturer's wheels exists, otherwise disable the button
        module MakerWheelData { }
        MakerWheelData.load("/projects/specii/makerwheelinfo");

        if (MakerWheelData::MakerWheels.defined(tuner + "_carlist"))
        {
            Pane::maker.label.text_color = main::menu::MColorObject(0.784, 0.784, 0.784, 1.0);
            Pane::maker.used_header.visible = true;
            Pane::maker.used_header_disabled.visible = false;
            Pane::maker.insensitive = false;
            WheelShopRoot::current_list = MakerWheelData::MakerWheels[tuner + "_carlist"];
        }
        else
        {
            Pane::maker.label.text_color = main::menu::MColorObject(0.384, 0.384, 0.384, 1.0);
            Pane::maker.used_header.visible = false;
            Pane::maker.used_header_disabled.visible = true;
            Pane::maker.insensitive = true;
            WheelShopRoot::current_list = nil;

            // If we hovered over the maker wheels pane with the previous car, and the current one can't go into that menu, move away
            if (ROOT.getFocusedWidget() == Pane::maker)
                ROOT.setFocus(Pane::bridgestone);
        }

        if (ROOT.defined("MakerWheelData"))
            MakerWheelData.clearStatic();

        CarFace.car_garage = main::game.garage.riding_car;
        CarFace.action_type = "normal";
        CarFace.quality_level = 0;
        CarFace.syncLoading();
        CarFace.loadModelOptionMotion("image/gtmode/gtauto/wheelShop_camera.mot");
        CarFace.car_model.tx = 0.0;
        CarFace.car_model.tz = 0.0;
        CarFace.car_model.warp();
    }

    function onFinalize(context)
    {
        leavePage(context, ROOT);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        start_page(context, GTAutoRoot);
        return EVENTRESULT_FILTER;
    }

    function onActivate(context, event)
    {
        if (event.widget.defined("tuner"))
        {
            WheelShopRoot::current_wheel_maker = event.widget.tuner;
            WheelShopRoot::is_maker_wheels = true;

            // If input still ended up on this button somehow
            if (Pane::maker.insensitive)
            {
                main::sound.play("disable");
                return EVENTRESULT_FILTER;
            }
        }
        else
        {
            WheelShopRoot::current_wheel_maker = event.widget.name;
            WheelShopRoot::is_maker_wheels = false
        }

        main::sound.play("ok");
        start_page(context, WheelShopRoot);
        return EVENTRESULT_FILTER;
    }
}