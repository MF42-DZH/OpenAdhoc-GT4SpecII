













module OptionProject::ArcadeRoot
{
    module PenaltyType
    {
        static NONE = 0;
        static SPEED_LIMITATION = 1;
        static PASSING_PITLANE = 2;
    }

    static PenaltyTypeString = ["NONE", "SPEED_LIMITATION", "PASSING_PITLANE"];

    function open(context)
    {
        start_page(context, ROOT);
    }

    function close(context)
    {
        start_page(context, OptionRoot);
    }

    function reflect(context)
    {
        var option = main::game.option;
        Pane::RaceLaps::slider.index = option.race_laps;
        Pane::TireDamage::OptionMenu.setIndex(context, option.tire_damage);

        var index = 0;
        if (option.assist_tcs)
        {
            index = 1;
            if (option.assist_asm)
                index = 2;
        }

        Pane::DrivingAssist::OptionMenu.setIndex(context, index);
        Pane::Penalty::OptionMenu.setIndex(context, PenaltyType[option.penalty_type]);
        Pane::TimeLimit::slider.index = option.arcade_time_limit / 30;
    }

    function apply(context)
    {
        var option = main::game.option;
        option.race_laps = Pane::RaceLaps::slider.index;
        option.tire_damage = Pane::TireDamage::OptionMenu.index;
        option.assist_asm = Pane::DrivingAssist::OptionMenu.index == 2 ? true : false;
        option.assist_tcs = Pane::DrivingAssist::OptionMenu.index > 0 ? true : false;
        print option.assist_tcs;
        print option.assist_asm;
        option.penalty_type = PenaltyTypeString[Pane::Penalty::OptionMenu.index];
        option.arcade_time_limit = Pane::TimeLimit::slider.index * 30;
        main::game.setNeedSave();
    }

    function onInitialize(context)
    {
        Pane::Penalty::OptionMenu::popup::vbox::PenaltyA::label.adjustScale();
        Pane::Penalty::OptionMenu::popup::vbox::PenaltyB::label.adjustScale();
        Pane::DrivingAssist::OptionMenu::popup::vbox::TCSOnly::label.adjustScale();

        ROOT.setFocus(Pane::RaceLaps::slider);
        reflect(context);

        setupSlider(Pane::RaceLaps::slider);
        setupSlider(Pane::TimeLimit::slider, 30, context.translate(ROOT, "none"));
    }

    function onFinalize()
    {

    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return STATE_YIELD;
    }
}

module OptionProject::ArcadeRoot::Pane::RaceLaps::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module OptionProject::ArcadeRoot::Pane::TimeLimit::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider, 30, context.translate(ROOT, "none"));
    }
}

module OptionProject::ArcadeRoot::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return STATE_YIELD;
    }
}

module OptionProject::ArcadeRoot::Pane::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply(context);
        close(context);
        return STATE_YIELD;
    }
}