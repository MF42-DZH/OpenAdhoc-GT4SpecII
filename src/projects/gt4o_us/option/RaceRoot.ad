













module OptionProject::RaceRoot
{
    function open(context)
    {
        start_page(context, ROOT);
    }

    function close(context)
    {
        start_page(context, OptionRoot);
    }

    function reflect(context)
    {
        var option = main::game.option;
        Pane::Transmission::OptionMenu.setIndex(context, 1 - option.automatic_gear);
        Pane::Config::OptionMenu.setIndex(context, option.race_display_config);
        Pane::Meter::OptionMenu.setIndex(context, 1 - option.race_display_meter);
        Pane::GMeter::OptionMenu.setIndex(context, 1 - option.race_display_g_meter);
        Pane::Lap::OptionMenu.setIndex(context, 1 - option.race_display_lap);
        Pane::SuggestedGear::OptionMenu.setIndex(context, 1 - option.race_display_suggested_gear);
        Pane::Map::OptionMenu.setIndex(context, 1 - option.race_display_map);
        Pane::Steering::OptionMenu.setIndex(context, 1 - option.race_display_steering);

        toggleSubOptions(context)
    }

    function apply()
    {
        main::game.setNeedSave();
        var option = main::game.option;

        option.automatic_gear = 1 - Pane::Transmission::OptionMenu.index;
        // We're storing automatic_gear twice, this time in an option variable that appears to be unused
        // Means we can revert if a CVT or auto-only car has fiddled with the automatic setting
        option.race_display_car_name = option.automatic_gear;
        option.race_display_config = Pane::Config::OptionMenu.index;
        option.race_display_meter = 1 - Pane::Meter::OptionMenu.index;
        option.race_display_g_meter = 1 - Pane::GMeter::OptionMenu.index;
        option.race_display_lap = 1 - Pane::Lap::OptionMenu.index;
        option.race_display_suggested_gear = 1 - Pane::SuggestedGear::OptionMenu.index;

        option.race_display_map = 1 - Pane::Map::OptionMenu.index;
        option.race_display_steering = 1 - Pane::Steering::OptionMenu.index;
    }

    function onInitialize(context)
    {
        ROOT.setFocus(Pane::Transmission::OptionMenu);
        reflect(context);
    }

    function onFinalize()
    {

    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return STATE_YIELD;
    }

    function toggleSubOptions(context)
    {
        if (Pane::Meter::OptionMenu.index == 1)
        {
            Pane::GMeter::OptionMenu.setIndex(context, 1);
            Pane::GMeter::OptionMenu.insensitive = true;
            Pane::SuggestedGear::OptionMenu.setIndex(context, 1);
            Pane::SuggestedGear::OptionMenu.insensitive = true;
        }
        else
        {
            Pane::GMeter::OptionMenu.insensitive = false;
            Pane::SuggestedGear::OptionMenu.insensitive = false;
        }
    }
}

module OptionProject::RaceRoot::Pane::Meter::OptionMenu
{
    function onValueChanged(context, index)
    {
        toggleSubOptions(context);
    }
}

module OptionProject::RaceRoot::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return STATE_YIELD;
    }
}

module OptionProject::RaceRoot::Pane::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply();
        close(context);
        return STATE_YIELD;
    }
}