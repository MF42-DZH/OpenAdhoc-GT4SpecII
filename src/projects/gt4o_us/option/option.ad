#define FLAG_BONNET_CAM (1);
#define FLAG_INTERIOR_CAM (1 << 1);
#define FLAG_GT3_CAM (1 << 2);
#define FLAG_ROOF_CAM (1 << 3);

#define FLAG_PRIZE_RANDOMIZER (1);
#define FLAG_TRACK_RANDOMIZER (1 << 1);

module OptionProject::MComponent::SetupPanel::SetupWindow
{
    method doColorize()
    {
        var title = MComponent::SetupPanel::SetupWindow::Title;
        var slider;
        var pulldown;
        var text_input;
        var number_input;
        var vacant;
        var bottom_spacer;
        var buttons;

        if (MComponent::SetupPanel.defined("Slider"))
            slider = MComponent::SetupPanel::Slider;

        if (MComponent::SetupPanel.defined("Pulldown"))
            pulldown = MComponent::SetupPanel::Pulldown;

        if (MComponent::SetupPanel.defined("TextInput"))
            text_input = MComponent::SetupPanel::TextInput;

        if (MComponent::SetupPanel.defined("NumberInput"))
            number_input = MComponent::SetupPanel::NumberInput;

        if (MComponent::SetupPanel.defined("Vacant"))
            vacant = MComponent::SetupPanel::Vacant;

        if (MComponent::SetupPanel.defined("BottomSpacer"))
            bottom_spacer = MComponent::SetupPanel::BottomSpacer;

        if (MComponent::SetupPanel.defined("Buttons"))
            buttons = MComponent::SetupPanel::Buttons;

        var i = 0;
        

        for (var it = self.first_window; it != nil; it = it.next_window)
        {
            var p = it.__prototype__;

            if (p == title)
                continue;

            if (p == buttons)
                continue;

            if (it.visible)
            {
                if (p == bottom_spacer)
                {
                    var ii = (i % 2) + 7;
                    var c = main::menu::MColorObject();
                    c.color_index = ii;
                    it.bspacer.setColor(c);
                }
                else if (p == pulldown || p == text_input || p == number_input || p == slider || p == vacant)
                {
                    var ii = (i + 1) % 2 + 7;
                    var c = main::menu::MColorObject();
                    c.color_index = ii;
                    it.bg.setColor(c);
                    i++;
                }
            }
        }
    }

    method onLoad(context)
    {
        doColorize();
    }
}

module OptionProject::MComponent::SetupPanel::Buttons::OK::bgf
{
    method __copy_init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module OptionProject::MComponent::SetupPanel::Buttons::CancelOK::No::bgf
{
    method __copy_init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module OptionProject::MComponent::SetupPanel::Buttons::CancelOK::Yes::bgf
{
    method __copy_init__()
    {
        self.actor = main::menu::MFadeActor(self, 1.0);
        self.actor.period = 0.25;
        self.actor.repeat = true;
    }
}

module OptionProject
{
    // Spec II options to save
    static randomizer_flag = -1;
    static global_asmo = -1;
    static global_asmu = -1;
    static global_tcsc = -1;
    static aspec_reward = -1;
    static show_owned_cars = -1;
    static video_mode = -1;
    static cam_flag = 8; // Bitflag to enable just roof cam by default
    static gauge_mode = -1; // -1 = Default, 0 = Always analog, 1 = Always digital
    static transmission_volume = 2; // 0 = off, 1 = quiet, 2 = normal, 3 = loud

    function logInfo(msg)
    {
        print "\n--------------------\n";
        print "\n%{msg}\n";
        print "\n--------------------\n";
    }

    #include "../share/dialog.ad"
    #include "../share/page_util.ad"
    #include "../share/course_define.ad"
    #include "../share/watcher_util.ad"

    PROJECT.load("/projects/arcade/" + main::game.option.game_zone + "_carlist");

    function onLoad(context)
    {
        main::sound.load();

        var settings = main::game.option.entrance_addr.split(";");

        for (var i = 0; i < settings.size; i++)
        {
            var [k, v] = settings[i].split("=");
            switch (k)
            {
                case "r":
                    randomizer_flag = v.toInt();
                    break; 

                case "o":
                    global_asmo = v.toInt();
                    break;
                
                case "u":
                    global_asmu = v.toInt();
                    break;

                case "t":
                    global_tcsc = v.toInt();
                    break;

                case "as":
                    aspec_reward = v.toInt();
                    break;

                case "so":
                    show_owned_cars = v.toInt();
                    break;

                case "vm":
                    video_mode = v.toInt();
                    break;

                case "c":
                    cam_flag = v.toInt();
                    break;

                case "g":
                    gauge_mode = v.toInt();
                    break;

                case "tm":
                    transmission_volume = v.toInt();
                    break;
            }
        }

        context.createRenderContext(1);
        var render_context = context.getRenderContext(0);
        render_context.transition = main::menu::MColorTransition();
        render_context.event_mask |= 2;
        render_context.startPage(OptionRoot);
    }

    function onUnload(context)
    {
        main::sound.unload();
        var render_context = context.getRenderContext(0);
        render_context.event_mask &= ~2;
    }

    function common_open(context, root, original_y)
    {
        start_page(context, root);
    }

    function common_close(context, root)
    {
        start_page(context, OptionRoot);
    }

    function setupSlider(slider, bias, none, overwriteMinMax)
    {
        if (bias == nil)
            bias = 1;

        if (none != nil && slider.index == 0)
            slider["label"].text = none;
        else 
            slider["label"].text = slider.index * bias;

        var popup = slider["popup"];
        popup["pinch"]["value"].text = slider.index * bias;

        if (overwriteMinMax == nil || overwriteMinMax == 1)
        {
            var min = slider.min * bias;
            var max = slider.max * bias;
            popup["min"].text = min.toInt();
            popup["max"].text = max.toInt();
        }
    }

    function saveNewSettings(context)
    {
        main::game.option.entrance_addr = "r=%{randomizer_flag};o=%{global_asmo};u=%{global_asmu};t=%{global_tcsc};as=%{aspec_reward};so=%{show_owned_cars};vm=%{video_mode};c=%{cam_flag};g=%{gauge_mode};tm=%{transmission_volume}";
        print main::game.option.entrance_addr;
        main::game.setNeedSave();
    }
}