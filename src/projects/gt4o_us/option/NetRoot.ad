module OptionProject::NetRoot
{
    static original_y = Pane.y;

    function open(context)
    {
        common_open(context, ROOT, original_y);
    }

    function close(context)
    {
        common_close(context, ROOT);
    }

    function reflect(context)
    {
        var option = main::game.option;
        var netconf = option.netconf;

        Pane::AutoConnect::OptionMenu.setIndex(context, 1 - option.LAN_auto_connect);
        Pane::ConnectIdx::slider.index = option.LAN_auto_machine_idx;
        Pane::UseProxy::OptionMenu.setIndex(context, 1 - netconf.use_proxy);
        Pane::ProxyAddr::Input::input.value = netconf.proxy;
        Pane::ProxyPort::Input::number::input.value = netconf.proxy_port;
        Pane::UseUPnP::OptionMenu.setIndex(context, 1 - option.use_upnp);
        Pane::UDPBindPortSetting::OptionMenu.setIndex(context, option.udp_bind_port_setting != 0);
        Pane::UDPBindPort::Input::number::input.value = option.udp_bind_port;
        Pane::EntranceAddr::Input::input.value = option.entrance_addr;
        Pane::EntrancePort::Input::number::input.value = option.entrance_port;
        sensitive(context);
    }

    function apply(context)
    {
        main::game.setNeedSave();
        var option = main::game.option;
        var netconf = option.netconf;
        option.LAN_auto_connect = Pane::AutoConnect::OptionMenu.index == 0;
        option.LAN_auto_machine_idx = Pane::ConnectIdx::slider.index;
        netconf.use_proxy = Pane::UseProxy::OptionMenu.index == 0;

        var proxy = main::menu::MUtility::CutHeadTailSpace(Pane::ProxyAddr::Input::input.value);
        netconf.proxy = proxy;
        netconf.proxy_port = Pane::ProxyPort::Input::number::input.value;
        option.use_upnp = Pane::UseUPnP::OptionMenu.index == 0;
        var is_manual_setting = Pane::UDPBindPortSetting::OptionMenu.index != 0;
        option.udp_bind_port_setting = is_manual_setting;

        if (is_manual_setting)
            option.udp_bind_port = Pane::UDPBindPort::Input::number::input.value;

        //option.entrance_addr = Pane::EntranceAddr::Input::input.value;
        option.entrance_port = Pane::EntrancePort::Input::number::input.value;
        option.netconf = netconf;
    }

    function sensitive(context)
    {
        var auto_connect = Pane::AutoConnect::OptionMenu.index == 0;
        Pane::ConnectIdx::slider.insensitive = !auto_connect;
        var use_proxy = Pane::UseProxy::OptionMenu.index == 0;
        Pane::ProxyAddr::Input::input.insensitive = !use_proxy;
        Pane::ProxyPort::Input.insensitive = !use_proxy;

        var is_manual_setting = Pane::UDPBindPortSetting::OptionMenu.index != 0;
        Pane::UDPBindPort::Input.insensitive = !is_manual_setting;
    }

    function onInitialize(context)
    {
        reflect(context);
        setupSlider(Pane::ConnectIdx::slider);
        Pane::EntranceAddr.visible = OptionRoot::sSecretDone;
        Pane::EntrancePort.visible = OptionRoot::sSecretDone;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        close(context);
        return STATE_YIELD;
    }

    static sCurrentIdx = 0;
    static sMUIS = [
        ["gt4online-muis-dev.scej-online.jp", 10071],
        ["gt4online-muis.scej-online.jp", 10071],
        ["moots-prbeta.muis.pdonline.scea.com", 10071],
        ["gt4-pubeta.muis.pdonline.scea.com", 10071],
        ["GT4.online.scee.com", 10080],
        ["blob149.scea.com", 10079],
    ]

    for (var i = 0; i < sMUIS.size; i++)
    {
        var addr = main::game.option.entrance_addr;
        
        if (addr == sMUIS[i][0])
        {
            sCurrentIdx = i;
            break;
        }
    }

    function onKeyPress(context, event)
    {
        if (OptionRoot::sSecretDone)
        {
            switch (event.keysym)
            {
                case PS2_PAD_CTRL_SELECT:
                    sCurrentIdx++
                    if (sCurrentIdx >= sMUIS.size)
                        sCurrentIdx = 0;
                    Pane::EntranceAddr::Input::input.value = sMUIS[sCurrentIdx][0];
                    Pane::EntrancePort::Input::number::input.value = sMUIS[sCurrentIdx][1];
                    return EVENTRESULT_FILTER;
            }
        }
        
        return EVENTRESULT_CONTINUE;
    }
}

module OptionProject::NetRoot::Pane::AutoConnect::OptionMenu
{
    function onValueChanged(context)
    {
        sensitive(context);
    }
}

module OptionProject::NetRoot::Pane::ConnectIdx::slider
{
    function onValueChanged(context)
    {
        setupSlider(slider);
    }
}

module OptionProject::NetRoot::Pane::UseProxy::OptionMenu
{
    function onValueChanged(context)
    {
        sensitive(context);
    }
}

module OptionProject::NetRoot::Pane::UDPBindPortSetting::OptionMenu
{
    function onValueChanged(context)
    {
        sensitive(context);
    }
}

module OptionProject::NetRoot::Pane::Buttons::CancelOK::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return STATE_YIELD;
    }
}

module OptionProject::NetRoot::Pane::Buttons::CancelOK::Yes
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply(context);
        close(context);
        return STATE_YIELD;
    }
}