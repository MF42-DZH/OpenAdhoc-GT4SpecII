













module OptionProject::ScreenRoot
{
    static sWide = false;
    static sHiVision = "";
    static sVertical = 0;
    static sHorizontal = 0;
    static sTime = 0;

    module ModeType
    {
        static M_normal = 0;
        static M_480p = 1;
        static M_1080i = 2;
    }

    static ModeString = ["normal", "480p", "1080i"];

    function open(context)
    {
        start_page(context, ROOT);
    }

    function close(context)
    {
        start_page(context, OptionRoot);
    }

    function reflect(context)
    {
        var option = main::game.option;
        Pane::Wide::OptionMenu.setIndex(context, option.wide_mode);
        Pane::Vertical::slider.index = option.screen_adjust_v;
        Pane::Horizontal::slider.index = option.screen_adjust_h;

        var mode = "M_" + option.race_display_mode;
        Pane::HiVision::OptionMenu.setIndex(context, ModeType[mode]);
    }

    function apply(context)
    {
        main::game.setNeedSave();
        var option = main::game.option;

        option.wide_mode = Pane::Wide::OptionMenu.index;
        option.screen_adjust_v = Pane::Vertical::slider.index;
        option.screen_adjust_h = Pane::Horizontal::slider.index;
        option.race_display_mode = ModeString[Pane::HiVision::OptionMenu.index];
        // Save display res as a Spec II option
        video_mode = Pane::HiVision::OptionMenu.index;
        saveNewSettings(context);
    }

    function applyOrg(context)
    {
        var option = main::game.option;
        option.wide_mode = sWide;
        option.race_display_mode = sHiVision;
        option.screen_adjust_v = sVertical;
        option.screen_adjust_h = sHorizontal;
        option.apply(context);
    }

    function WatcherHandler(context)
    {
        if (main::menu::MSystem::GetCurrentDateTime() - sTime >= 15)
            cancelConfirmDialog(context);
    }

    function TryModeChange(context, mode, str)
    {
        var option = main::game.option;
        option.race_display_mode = mode;

        option.applyRaceDisplayMode();

        sTime = main::menu::MSystem::GetCurrentDateTime();

        CreateWatcher(context, WatcherHandler, 2);
        var ret = openConfirmDialog(context, 3, context.translate(ROOT, str));
        DeleteWatcher();

        option.applyMenuDisplayMode();
        return ret;
    }

    function onInitialize(context)
    {
        if (main::menu::MSystem::GetVideoSystem() == "NTSC")
            Pane::HiVision.visible = true;

        
        Pane::HiVision::OptionMenu::popup::vbox::Mode480p::label.adjustScale();
        Pane::HiVision::OptionMenu::popup::vbox::Mode1080i::label.adjustScale();

        var option = main::game.option;
        sWide = option.wide_mode;
        sHiVision = video_mode;
        sVertical = option.screen_adjust_v;
        sHorizontal = option.screen_adjust_h;

        ROOT.setFocus(Pane::Wide::OptionMenu);
        reflect(context);

        setupSlider(Pane::Vertical::slider);
        setupSlider(Pane::Horizontal::slider);
    }

    function onFinalize(context) { }

    function onCancel(context)
    {
        main::sound.play("cancel");
        applyOrg(context);
        close(context);
        return STATE_YIELD;
    }
}

module OptionProject::ScreenRoot::Pane::Wide::OptionMenu
{
    function onValueChanged(context)
    {
        apply(context);
    }
}

module OptionProject::ScreenRoot::Pane::Vertical::slider
{
    function onValueChanged(context)
    {
        apply(context);
        setupSlider(slider);
    }
}

module OptionProject::ScreenRoot::Pane::Horizontal::slider
{
    function onValueChanged(context)
    {
        apply(context);
        setupSlider(slider);
    }
}

module OptionProject::ArcadeRoot::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        close(context);
        return STATE_YIELD;
    }
}

module OptionProject::ScreenRoot::Pane::HiVision::OptionMenu
{
    function onValueChanged(context)
    {
        if (OptionMenu.index == 2)
        {
            var ret = openConfirmDialog(context, 1, context.translate(ROOT, "TryHiVision"));
            if (ret)
                ret = ScreenRoot::TryModeChange(context, "1080i", "TryingHiVision");

            if (!ret)
                OptionMenu.setIndex(context, 0);
            else
                OptionMenu.setIndex(context, 2);
        }
        else if (OptionMenu.index == 1)
        {
            var ret = openConfirmDialog(context, 1, context.translate(ROOT, "TryProgressive"));
            if (ret)
                ret = ScreenRoot::TryModeChange(context, "480p", "TryingProgressive");

            if (!ret)
                OptionMenu.setIndex(context, 0);
        }
    }
}

module OptionProject::ScreenRoot::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        applyOrg(context);
        close(context);
        return STATE_YIELD;
    }
}

module OptionProject::ScreenRoot::Pane::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply();
        close(context);
        return STATE_YIELD;
    }
}