








module BootProject::ExplainRoot
{
    Arrow.actor = main::menu::MMoveActor(Arrow, Arrow.x - 16.0, Arrow.y + 32.0);
    Arrow.actor.repeat = true;
    Arrow.actor.flip = true;
    Arrow.actor.linear = true;
    Arrow.actor.ratio = 0.1;

    function onInitialize(context)
    {
        context.pushEvent(main::menu::MScriptEvent(context, ExplainRoot, "init"));
        Arrow.visible = false;
    }

    function onFinalize(context)
    {

    }

    function init(context)
    {
        setMcAccessIndicator(Memorycard);

        openConfirmDialog(context, 0, context.translate(ExplainRoot, "gt4 use autosave"));

        Arrow.visible = true;
        beginAccessIndicator(true);

        openConfirmDialog(context, 0, context.translate(ExplainRoot, "kounaru"));
        openConfirmDialog(context, 0, context.translate(ExplainRoot, "dont unplug"));

        endAccessIndicator();
        Arrow.visible = false;

        if (main::menu::MSystem::GetRegionCode() != "tw" &&main::menu::MSystem::GetRegionCode() != "cn" && 
            main::menu::MSystem::GetVersionBranch() != "beta" && openConfirmDialog(context, 1, context.translate(ExplainRoot, "GT savedate is available")))
        {
            var end_flg = false;
            while (!end_flg)
            {
                if (main::menu::MSystem::GetRegionCode() != "kr")
                {
                    openConfirmDialog(context, 0, context.translate(ExplainRoot, "GT3 savedata is available")
                        .format(main::menu::MUtility::GetMoneyString(100000)));
                }

                openConfirmDialog(context, 0, context.translate(ExplainRoot, "GT4P savedata is available"));

                openConfirmDialog(context, 0, context.translate(ExplainRoot, "goto STATUS"));
                end_flg = openConfirmDialog(context, 1, context.translate(ExplainRoot, "introduction done"), nil,
                    context.translate(ExplainRoot, "start game"),
                    context.translate(ExplainRoot, "again"));
            }
        }

        exitBootSequence(context);
    }

    function onCancel(context, event, item)
    {
        return STATE_YIELD;
    }
}