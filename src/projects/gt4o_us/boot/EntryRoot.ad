








module BootProject::EntryRoot
{
    static lang = "";

    static KEYBOARD_OFFSETS = [[0, 0], [10, 32], [24, 64]]
    static KEYBOARD_LETTERS = [
        [
            ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"],
             ["a", "s", "d", "f", "g", "h", "j", "k", "l"],
              ["z", "x", "c", "v", "b", "n", "m"]
        ],
        [
            ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
             ["A", "S", "D", "F", "G", "H", "J", "K", "L"],
              ["Z", "X", "C", "V", "B", "N", "M"]
        ],
        [
            ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"],
             ["`", " ", " ", ";", "'", "[", "]", "-", "="],
             ["\\", " ", " ", " ", ",", ".", "/"]
        ],
        [
            ["!", "@", "#", "$", " ", "^", "&", "*", "(", ")"],
             ["~", " ", " ", ":", " ", "{", "}", "_", "+"],
              ["|", " ", " ", " ", "<", ">", "?"]
        ],
    ];

    static initial_uppercase = true;
    static backspace_on_empty = false;
    static keyboard_state = 1;

    function setCase(current_key)
    {
        if (Keyboard.defined("board_0"))
            Keyboard["board_0"].visible = false;
        if (Keyboard.defined("board_1"))
            Keyboard["board_1"].visible = false;
        if (Keyboard.defined("board_2"))
            Keyboard["board_2"].visible = false;
        if (Keyboard.defined("board_3"))
            Keyboard["board_3"].visible = false;
        if (Keyboard.defined("board_%d".format(keyboard_state)))
        {
            Keyboard["board_%d".format(keyboard_state)].visible = true;
            if (current_key != nil)
            {
                if (current_key == "key_shift" || current_key == "key_sym" || current_key == "key_backspace" || current_key == "key_enter")
                    EntryRoot.setFocus(Keyboard[current_key]);
                else
                    EntryRoot.setFocus(Keyboard["board_%d".format(keyboard_state)][current_key]);
            }
        }
    }

    function buildKeyboard(context)
    {
        for (var boardi = 0; boardi < KEYBOARD_LETTERS.size; boardi++)
        {
            var board = Keyboard::base_board.doCopy();
            board.name = "board_%d".format(boardi);
            board.visible = true;

            var keys = [];

            // Having the appends in the outer loop caused TLB misses for some reason
            // So this slightly slower (unnoticeable to player) method builds an array of keys to add, then loops through adding them
            for (var rowi = 0; rowi < KEYBOARD_LETTERS[boardi].size; rowi++)
            {
                for (var coli = 0; coli < KEYBOARD_LETTERS[boardi][rowi].size; coli++)
                {
                    var key = Keyboard::base_key.doCopy();
                    key.name = "key_%d_%d".format(rowi, coli);
                    key.visible = true;
                    key.x = KEYBOARD_OFFSETS[rowi][0] + (coli * 32);
                    key.y = KEYBOARD_OFFSETS[rowi][1];
                    key["label"].text = KEYBOARD_LETTERS[boardi][rowi][coli];
                    key["labela"].text = KEYBOARD_LETTERS[boardi][rowi][coli];
                    keys.push(key); // board.appendChild(key);
                }
            }

            for (var i = 0; i < keys.size; i++)
            {
                board.appendChild(keys[i]);
            }

            Keyboard.appendChild(context, board);
        }
    }

    function onInitialize(context)
    {
        lang = main::menu::MSystem::GetLanguage();

        initial_uppercase = true;
        keyboard_state = 1;
        buildKeyboard(context);
        setCase();

        ToolTip::tip.remove();
        ToolTip::tip.value = context.translate(EntryRoot, "Please input your name within 10 letters");

        EntryRoot.setFocus(Keyboard::key_enter);

        var event = main::menu::MScriptEvent(context, EntryRoot, "introMessage");
        context.pushEvent(event);
    }

    function introMessage(context)
    {
        context.sync();
        openConfirmDialog(context, 0, context.translate(ROOT, "welcome_specii"));
    }

    function onFinalize(context)
    {
        initial_uppercase = nil;
        keyboard_state = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        Keyboard::input.backspace();
        if (EntryRoot::Keyboard::input.value != "")
            set_case(context);
        else
        {
            backspace_on_empty = true;
            keyboard_state = 1;
            initial_uppercase = true;
            set_case(context);
        }
        return EVENTRESULT_FILTER;
    }

    function do_enter(context)
    {
        var value = EntryRoot::Keyboard::input.value;
        if (value == "")
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(EntryRoot, "No letters"));
            return;
        }
        else
        {
            main::sound.play("ok");
            
            if (openConfirmDialog(context, 1, context.translate(EntryRoot, "Are you sure your name is this").format(value)))
            {
                main::game.username = value;

                openConfirmDialog(context, 0, context.translate(EntryRoot, "then create save data"));
                if (!createGameData(context))
                {
                    exitBootSequence(context);
                    return;
                }

                // Set some default Spec II options
                main::game.option.entrance_addr = "r=0;o=-1;u=-1;t=-1;as=-1;so=1;vm=1;c=8;g=-1;tm=2";

                // Narration is unused so we're hijacking this to work as a "tutorial seen" flag
                // This will be read in gtmode TopRoot to give the user an intro message (including Spec II settings)
                main::game.option.narration = 0;
                main::menu::MMemoryCardManager::setExistValidGameData(true);
                start_page(context, ExplainRoot);
            }
        }
    }

    function onActivate(context, event, item)
    {
        var input = Keyboard::input;
        var widget = event.widget;
        var ch = widget.name.substr(4);

        switch (ch)
        {
            case "backspace":
                main::sound.play("cursor");
                input.backspace();
                break;

            case "enter":
                do_enter(context);
                return STATE_YIELD;
                break;

            case "shift":
                main::sound.play("cursor");

                if (initial_uppercase)
                    initial_uppercase = false;

                if (keyboard_state == 0)
                    keyboard_state = 1;
                else if (keyboard_state == 1)
                    keyboard_state = 0;
                else if (keyboard_state == 2)
                    keyboard_state = 3;
                else if (keyboard_state == 3)
                    keyboard_state = 2;
                break;

            case "sym":
                main::sound.play("cursor");

                if (initial_uppercase)
                    initial_uppercase = false;

                if (keyboard_state == 0)
                    keyboard_state = 2;
                else if (keyboard_state == 1)
                    keyboard_state = 3;
                else if (keyboard_state == 2)
                    keyboard_state = 0;
                else if (keyboard_state == 3)
                    keyboard_state = 1;
                break;

            default:
                main::sound.play("cursor");

                var parts = ch.split("_");
                ch = KEYBOARD_LETTERS[keyboard_state][parts[0]][parts[1]];

                input.putString(ch);
                break;
        }

        set_case(context);
        return STATE_YIELD;
    }

    function set_case(context)
    {
        if (initial_uppercase && !backspace_on_empty)
        {
            keyboard_state = 0;
            initial_uppercase = false;
        }
        else if (backspace_on_empty)
        {
            backspace_on_empty = false;
        }

        var fwidget = EntryRoot.getFocusedWidget();
        if (fwidget != nil)
        {
            var name = fwidget.name;
            setCase(name);

            if (Keyboard.defined(keyboard_state))
            {
                if (Keyboard[keyboard_state].defined(name))
                    EntryRoot.setFocus(Keyboard[keyboard_state][name]);
            }
        }
        else
        {
            setCase();
        }
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_L1:
                main::sound.play("cursor");
                if (keyboard_state == 0)
                    keyboard_state = 1;
                else 
                {   
                    keyboard_state = 0;
                    initial_uppercase = false;
                }
                set_case(context);
                return STATE_YIELD;
                
            case PS2_PAD_CTRL_R1:
                main::sound.play("cursor");
                if (keyboard_state != 2)
                {
                    keyboard_state = 2;
                    initial_uppercase = false;
                }
                else if (keyboard_state == 2)
                {
                    keyboard_state = 3;
                }
                set_case(context);
                return STATE_YIELD;

            case PS2_PAD_CTRL_START:
                EntryRoot.setFocus(Keyboard::key_enter);
                do_enter(context);
                return STATE_YIELD;
                break;
        }

        return STATE_EXIT;
    }
}