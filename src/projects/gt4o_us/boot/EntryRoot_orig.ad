








module BootProject::EntryRoot
{
    static lower_case = nil;

    function setCase()
    {
        if (lower_case)
        {
            Keyboard::LowerCase.visible = true;
            Keyboard::UpperCase.visible = false;
        }
        else
        {
            Keyboard::UpperCase.visible = true;
            Keyboard::LowerCase.visible = false;
        }
    }

    function onInitialize(context)
    {
        // Hacky - lang was pushed into next_menu_arg by LanguageRoot
        // If it's set here then change the language, reload, and clear it
        if (main::game.next_menu_arg != "" && main::game.next_menu_arg != "EntryRoot")
        {
            openConfirmDialog(context, 0, main::game.next_menu_arg);
            if (main::game.next_menu_arg != main::menu::MSystem::GetLanguage())
            {
                main::menu::MSystem::SetLanguage(main::game.next_menu_arg);
                main::menu::MSystem::SyncUnitWithLanguage();
                main::game.next_menu_arg = "EntryRoot";
                main::game.next_sequence = "menu";
                main::game.major_menu_project = "boot";
                start_page(context, nil);
        
            }
        }

        lower_case = false;
        setCase();

        ToolTip::tip.remove();
        ToolTip::tip.value = context.translate(EntryRoot, "Please input your name within 10 letters");
        EntryRoot.setFocus(Keyboard::key_enter);

        var event = main::menu::MScriptEvent(context, EntryRoot, "introMessage");
        context.pushEvent(event);
    }

    function introMessage(context)
    {
        context.sync();
        openConfirmDialog(context, 0, context.translate(EntryRoot, "Randomizer"));
    }

    function onFinalize(context)
    {
        lower_case = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        Keyboard::input.backspace();
        set_case(context);
    }

    function do_enter(context)
    {
        var value = EntryRoot::Keyboard::input.value;
        if (value == "")
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(EntryRoot, "No letters"));
            return;
        }

        main::sound.play("ok");
     
        if (openConfirmDialog(context, 1, context.translate(EntryRoot, "Are you sure your name is this").format(value)))
        {
            main::game.username = value;

            openConfirmDialog(context, 0, context.translate(EntryRoot, "then create save data"));
            if (!createGameData(context))
            {
                exitBootSequence(context);
                return;
            }

            main::menu::MMemoryCardManager::setExistValidGameData(true);
            start_page(context, ExplainRoot);
        }
    }

    function onActivate(context, event, item)
    {
        var input = Keyboard::input;
        var widget = event.widget;
        var ch = widget.name.substr(4);

        switch (ch)
        {
            case "backspace":
                main::sound.play("cursor");
                input.backspace();
                break;

            case "enter":
                do_enter(context);
                break;

            default:
                main::sound.play("cursor");

                if (!lower_case)
                    ch = ch.upcase();
                
                input.putString(ch);
                break;
        }

        set_case(context);
        return STATE_YIELD;
    }
    
    function set_case(context)
    {
        var last_case = lower_case;
        lower_case = Keyboard::input.value != "";

        if (last_case != lower_case)
        {
            var fwidget = EntryRoot.getFocusedWidget();
            if (fwidget != nil)
            {
                var name = fwidget.name;
                setCase();

                if (!lower_case)
                {
                    if (Keyboard::UpperCase.defined(name))
                        EntryRoot.setFocus(Keyboard::UpperCase[name]);
                }
                else if (Keyboard::LowerCase.defined(name))
                {
                    EntryRoot.setFocus(Keyboard::LowerCase[name]);
                }
            }
            else
            {
                setCase();
            }
        }
    }
}