module SettingProject
{
    #include "../share/dialog.ad"
    #include "../share/page_util.ad"
    #include "../share/regulation.ad"
    #include "../share/parts_list.ad"

    static current_race = nil;
    static current_course = nil;
    static current_car = nil;
    static notice_shown = false;

    function onLoad(context)
    {
        main::sound.load();
        context.createRenderContext(true);
        var render_context = context.getRenderContext(0);
        render_context.transition = main::menu::MColorTransition();
        render_context.transition.panIn(render_context);

        if (main::game.race_code != "")
            current_race = main::game.race_code;
        else
            current_race = nil;

        if (main::game.course_code != "")
            current_course = main::game.course_code;
        else
            current_course = nil;

        current_car = main::game.garage.riding_car;
        current_car.beginSetting();

        if (current_race != nil)
            ;

        if (current_course != nil)
            ;

        render_context.startPage(SettingRoot);
    }

    function onUnload(context)
    {
        current_car.endSetting();

        current_car = nil;
        current_course = nil;
        current_race = nil;

        main::sound.unload();
    }

    function setupSlider(slider, bias, offset)
    {
        if (slider.insensitive)
        {
            slider["label"].text = "--";
            return;
        }

        if (bias == nil)
            bias = 0;

        if (offset == nil)
            offset = 0;

        if (!slider.defined("level"))
        {
            if (bias == 1)
            {
                var val_text = main::menu::MUtility::GetFormatString("%.1t", slider.index + offset);
                slider["label"].text = val_text;

                var popup = slider["popup"];
                popup["min"].text = main::menu::MUtility::GetFormatString("%.1t", slider.display_min.toInt() + offset);
                popup["max"].text = main::menu::MUtility::GetFormatString("%.1t", slider.display_max.toInt() + offset);
                popup["pinch"]["value"].text = val_text;
            }
            else if (bias == 2)
            {
                var val_text = main::menu::MUtility::GetFormatString("%.2t", slider.index + offset);
                slider["label"].text = val_text;

                var popup = slider["popup"];
                popup["min"].text = main::menu::MUtility::GetFormatString("%.2t", slider.display_min.toInt() + offset);
                popup["max"].text = main::menu::MUtility::GetFormatString("%.2t", slider.display_max.toInt() + offset);
                popup["pinch"]["value"].text = val_text;
            }
            else if (bias == 3)
            {
                var val_text = main::menu::MUtility::GetFormatString("%.3t", slider.index + offset);
                slider["label"].text = val_text;

                var popup = slider["popup"];
                popup["min"].text = main::menu::MUtility::GetFormatString("%.3t", slider.display_min.toInt() + offset);
                popup["max"].text = main::menu::MUtility::GetFormatString("%.3t", slider.display_max.toInt() + offset);
                popup["pinch"]["value"].text = val_text;
            }
            else
            {
                slider["label"].text = slider.index + offset;

                var popup = slider["popup"];
                popup["min"].text = (slider.display_min.toInt() + offset).toString();
                popup["max"].text = (slider.display_max.toInt() + offset).toString();
                popup["pinch"]["value"].text = (slider.index + offset).toString();
            }
        }
        else
        {
            slider["label"].text = slider.index.toString(); 

            var popup = slider["popup"];
            popup["min"].text = slider.display_min.toString();
            popup["max"].text = slider.display_max.toString();
            popup["pinch"]["value"].text = slider.index.toString();
        }
    }

    function initSlider(slider, value, min, max, bias, offset)
    {
        slider.insensitive = min >= max;
        slider.range = [min, max];

        if (min <= value && value <= max)
            slider.index = value;
        else
            slider.index = min;

        setupSlider(slider, bias, offset);
    }

    function initSliderLevel(slider, level, level_range)
    {
        slider.insensitive = level <= 0;
        slider.range = [1, level_range];
        slider.index = level;

        setupSlider(slider);
    }

    function initSliderLevel0(slider, level, level_range)
    {
        slider.insensitive = level_range == 0;
        slider.range = [0, level_range];
        slider.index = level;

        setupSlider(slider);
    }

    function initSliderRange(slider, value, min, max, dmin, dmax, bias, offset)
    {
        slider.insensitive = min >= max;
        slider.range = [min, max];
        slider.display_min = dmin;
        slider.display_max = dmax;
        
        if (min <= value && value <= max)
            slider.index = value;
        else
            slider.index = min;

        setupSlider(slider, bias, offset);
    }

    function get_value_by_level(level, level_range, min, max)
    {
        return level;
    }

    function get_level_by_value(value, level_range, min, max)
    {
        if (level_range <= 1)
            return 0;

        return value;
    }

    function on_step_changed(slider, SKIP_THR)
    {
        var x = slider.value - slider.repeat_start;
        x /= 4.0;

        if (x < 0.0)
            x = -x;

        if (x < 1.0)
            x = 1.0;

        if (x > SKIP_THR)
            x = SKIP_THR;

        slider.step = x;
    }

    function getLimitedAspiration()
    {
        if (current_race != nil)
        {
            var race = main::menu::MRaceData(current_race);
            return race.getNeedAspiration();
        }

        return nil;
    }

    function isLimitedAspiration()
    {
        var limited = getLimitedAspiration();
        return limited != nil && limited != false;
    }

    function isLimitedNATUNE()
    {
        var limited = getLimitedAspiration();
        return limited != nil && limited == 1;
    }

    function isLimitedTURBO()
    {
        var limited = getLimitedAspiration();
        return limited != nil && limited != 2;
    }

    function isLimitedSUPERCHARGER()
    {
        var limited = getLimitedAspiration();
        return limited != nil && limited != 3;
    }
}