module SettingProject::LSDRoot
{
    static range_data = nil;

    function apply()
    {
        if (!Pane::InitialTorque::slider_f.insensitive)
            current_car.setLSDSetting(0, Pane::InitialTorque::slider_f.index);

        if (!Pane::InitialTorque::slider_r.insensitive)
            current_car.setLSDSetting(3, Pane::InitialTorque::slider_r.index);

        if (!Pane::LSDAccel::slider_f.insensitive)
            current_car.setLSDSetting(1, Pane::LSDAccel::slider_f.index);

        if (!Pane::LSDAccel::slider_r.insensitive)
            current_car.setLSDSetting(4, Pane::LSDAccel::slider_r.index);

        if (!Pane::LSDDecel::slider_f.insensitive)
            current_car.setLSDSetting(2, Pane::LSDDecel::slider_f.index);

        if (!Pane::LSDDecel::slider_r.insensitive)
            current_car.setLSDSetting(5, Pane::LSDDecel::slider_r.index);
    }

    function reflect()
    {
        var val = current_car.getLSDSetting(0);
        initSlider(Pane::InitialTorque::slider_f, val, range_data[0], range_data[1]);
        
        if (current_car.getEquipedParts(24) != 5)
        {
            val = current_car.getLSDSetting(3);
            initSlider(Pane::InitialTorque::slider_r, val, range_data[6], range_data[7]);
        }
        else
            initSlider(Pane::InitialTorque::slider_r, 0, 0, 0);

        val = current_car.getLSDSetting(1);
        initSlider(Pane::LSDAccel::slider_f, val, range_data[2], range_data[3]);

        val = current_car.getLSDSetting(4);
        initSlider(Pane::LSDAccel::slider_r, val, range_data[8], range_data[9]);

        val = current_car.getLSDSetting(2);
        initSlider(Pane::LSDDecel::slider_f, val, range_data[4], range_data[5]);

        val = current_car.getLSDSetting(5);
        initSlider(Pane::LSDDecel::slider_r, val, range_data[10], range_data[11]);
    }

    function onInitialize(context)
    {
        ROOT.setFocus(Pane::Buttons::Cancel);
        range_data = current_car.getLSDRange();

        reflect();
    }

    function onFinalize(context)
    {
        range_data = nil;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        start_page(context, SettingRoot);

        return EVENTRESULT_FILTER;
    }
}

module SettingProject::LSDRoot::Pane::InitialTorque::slider_f
{
    function onValueChanged(context, index)
    {
        setupSlider(slider_f);
    }
}

module SettingProject::LSDRoot::Pane::InitialTorque::slider_r
{
    function onValueChanged(context, index)
    {
        setupSlider(slider_r);
    }
}

module SettingProject::LSDRoot::Pane::LSDAccel::slider_f
{
    function onValueChanged(context, index)
    {
        setupSlider(slider_f);
    }
}

module SettingProject::LSDRoot::Pane::LSDAccel::slider_r
{
    function onValueChanged(context, index)
    {
        setupSlider(slider_r);
    }
}

module SettingProject::LSDRoot::Pane::LSDDecel::slider_f
{
    function onValueChanged(context, index)
    {
        setupSlider(slider_f);
    }
}

module SettingProject::LSDRoot::Pane::LSDDecel::slider_r
{
    function onValueChanged(context, index)
    {
        setupSlider(slider_r);
    }
}

module SettingProject::LSDRoot::Pane::Buttons::Default
{
    function onActivate(context)
    {
        main::sound.play("ok");

        if (!Pane::InitialTorque::slider_f.insensitive)
            current_car.setLSDSetting(0, range_data[12]);

        if (!Pane::InitialTorque::slider_r.insensitive)
            current_car.setLSDSetting(3, range_data[15]);

        if (!Pane::LSDAccel::slider_f.insensitive)
            current_car.setLSDSetting(1, range_data[13]);

        if (!Pane::LSDAccel::slider_r.insensitive)
            current_car.setLSDSetting(4, range_data[16]);

        if (!Pane::LSDDecel::slider_f.insensitive)
            current_car.setLSDSetting(2, range_data[14]);

        if (!Pane::LSDDecel::slider_r.insensitive)
            current_car.setLSDSetting(5, range_data[17]);

        reflect();
        start_page(context, SettingRoot);

        return EVENTRESULT_FILTER;
    }
}

module SettingProject::LSDRoot::Pane::Buttons::Cancel
{
    function onActivate(context)
    {
        main::sound.play("ok");
        start_page(context, SettingRoot);

        return EVENTRESULT_FILTER;
    }
}

module SettingProject::LSDRoot::Pane::Buttons::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        apply();
        start_page(context, SettingRoot);

        return EVENTRESULT_FILTER;
    }
}