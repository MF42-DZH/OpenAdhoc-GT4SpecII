// Preserved original typo
module SettingProject::EngineCurbePopup
{
    function setMoveActor(widget)
    {
        var actor = main::menu::MMoveActor(widget, 640.0, widget.y);
        widget.actor = actor;
        widget.actor.ratio = 0.2;
    }

    setMoveActor(Pane);

    function open(context)
    {
        Pane.actor.out = true;
        Pane.actor.warp();

        context.pushPage(EngineCurbePopup);

        Pane.actor.out = false;
    }

    function onInitialize(context)
    {
        var [power_points, torque_points] = current_car.buildEngineCurveData();

        var [power_points, torque_points, maxPS, maxTQ, minRPM, maxRPM] = current_car.buildEngineCurveData();

        if (power_points != nil)
        {
            Pane::Graph::power_gf.type = "line";
            Pane::Graph::power_gf.points = power_points;

            /*var rpms = [];
            var pwrs = [];
            for (var i = 0; i < Pane::Graph::power_gf.points.size; i++)
            {
                rpms.push((Pane::Graph::power_gf.points[i][0] * maxRPM).toInt());
                pwrs.push((Pane::Graph::power_gf.points[i][1] * maxPS).toInt());
            }
            
            var str = "";
            for (var i = 0; i < rpms.size; i++)
            {
                str += "%{pwrs[i]}ps @ %{rpms[i]}rpm\n";
            }
            openConfirmDialog(context, 0, str);*/
        }

        if (torque_points != nil)
        {
            Pane::Graph::torque_gf.type = "line";
            Pane::Graph::torque_gf.points = torque_points;
        }

        Pane::maxPS.text = main::menu::MUnit::GetPowerForDisplay(maxPS).toString();
        Pane::maxTQ.text = main::menu::MUnit::GetTorqueForDisplay(maxTQ).toString();

        Pane::minRPM.text = minRPM.toInt().toString();
        Pane::maxRPM.text = maxRPM.toInt().toString();

        context.cursor_visible = false;
    }

    function onFinalize(context)
    {
        context.cursor_visible = true;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_START:
                onCancel(context);
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");

        Pane.actor.out = true;
        context.sync(0.25);

        context.closePage(ROOT);
        SettingRoot::Graph.actor.out = false;

        return EVENTRESULT_FILTER;
    }
}