













module RaceEventProject::PrizeRoot
{
    static prize_amount = nil;
    static roulette_prize = false;

    /*static model_files = [
        "1st.mdl",
        "2nd.mdl",
        "3rd.mdl",
        "other.mdl",
        "other.mdl",
        "other.mdl"
    ]*/

    static ordinal_keys = [
        "Rank1st",
        "Rank2nd",
        "Rank3rd",
        "Rank4th",
        "Rank5th",
        "Rank6th",
        "Rank7th",
        "Rank8th",
        "Rank9th",
        "Rank10th",
        "Rank11th",
        "Rank12th"
    ]
    
    function onInitialize(context)
    {
        var quick_work = main::menu::MQuickWork();

        Prize.text = "";
        Money::label.text = "Cr." + main::game.money;
        context.cursor_visible = false;
        OK.visible = false;
        
        var race_code = quick_work.raceLabel;
        var name = nil;

        if (race_code == "family")
        {
            var course_name = context.translate(ROOT, "CourseNameCaption", main::game.course_code);
            name = context.translate(ROOT, "EventName", race_code) + " (" + course_name + ") ";
        }
        else 
            name = getEventNameByRaceCode(context, ROOT, race_code);

        var order = quick_work.playerGridNumber;
        //order = 1;
        ToolTip::tip.remove();

        if (main::menu::MSystem::GetRegionCode() == "us")
        {
            var oname = context.translate(ROOT, "RaceDisplay", ordinal_keys[order]);
            Info::label.text = context.translate(ROOT, "you got a prize").build(name, oname);
        }
        else 
            Info::label.text = context.translate(ROOT, "you got a prize").build(name, order + 1);

        Info::label.adjustScale();
        /*model.setModelSetPath("piece/prize/" + model_files[order], 0, 1, 0);
        model.doInitialize(context);*/

        rank.text = (order + 1).toString();

        switch (order + 1)
        {
            case 1:
                rank.text_color = main::menu::MColorObject(0.828, 0.671, 0.043, 1.0);
                Prize.text_color = main::menu::MColorObject(0.828, 0.671, 0.043, 1.0)
                break;

            case 2:
                rank.text_color = main::menu::MColorObject(0.55, 0.55, 0.575, 1.0);
                Prize.text_color = main::menu::MColorObject(0.55, 0.55, 0.575, 1.0);
                break;

            case 3:
                rank.text_color = main::menu::MColorObject(0.762, 0.543, 0.358, 1.0);
                Prize.text_color = main::menu::MColorObject(0.762, 0.543, 0.358, 1.0);
                break;

            default:
                rank.text_color = main::menu::MColorObject(0.284, 0.284, 0.334, 1.0);
                Prize.text_color = main::menu::MColorObject(0.284, 0.284, 0.334, 1.0);
                rank.shadow_color = main::menu::MColorObject(0.0, 0.0, 0.0, 0.0);
                Prize.shadow_color = main::menu::MColorObject(0.0, 0.0, 0.0, 0.0);
                break;
        }

        prize_amount = quick_work.prize;

        if (race_code.beginWith("eventgen"))
        {
            var finishPos = order + 1;
            print "finishPos: %{finishPos}";
            var distanceDriven = (quick_work.CourseLength.toFloat() / 1000.0) * main::game.overrideLaps();
            prize_amount = calcPrize(distanceDriven, finishPos);
        }

        context.pushEvent(main::menu::MScriptEvent(context, ROOT, "doAction"));
    }

    function onFinalize(context)
    {
        Info::label.text = nil; 
        prize_amount = nil;
        var quick_work = main::menu::MQuickWork();
        quick_work.prize = 0;
    }

    function onKeyPress(context)
    {
        return makePrizeFast();
    }

    function onKeyRelease(context)
    {
        return makePrizeSlow();
    }

    function doAction(context)
    {
        prize_action(context, ROOT, prize_amount, Prize, Money::label, OK, rank);
    }

    function calcPrize(totalDistance, finishPos)
    {
        var weightPos = 10000;
        var weightDist = 2000;
        var mult = 1;
        var finishPosDiv = finishPos == 1 ? 1 : (finishPos.toFloat() + 2.0) / 2.0;
        
        var multPos = (6.0 - (finishPos).toFloat()) / 6.0;
        var prize = ((((multPos * weightPos) + (totalDistance * weightDist)) * mult) / 10 / finishPosDiv).toInt() * 10; // Quick and dirty way to turn any ending value to 0
        if (prize > 1500000)
            prize = 1500000;

        return prize;
    }

    function pow(base, exponent)
    {
        var res = 1;
        for (var i = 0; i < exponent; i++)
            res *= base;

        return res;
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        if (roulette_prize)
            start_page(context, RaffleRoot);
        else
            start_page(context, AfterRoot);
        return STATE_YIELD;
    }
}

module RaceEventProject::PrizeRoot::OK
{
    function onActivate(context)
    {
        main::sound.play("ok");
        if (roulette_prize)
            start_page(context, RaffleRoot);
        else
            start_page(context, AfterRoot);
        return STATE_YIELD;
    }
}